{
  "components": {
    "agents": [
      {
        "file": "src/agents/runner.py",
        "classes": [
          {
            "name": "DeveloperAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 34
          },
          {
            "name": "QAAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 97
          },
          {
            "name": "ArchitectAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 156
          },
          {
            "name": "ResearchAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 217
          },
          {
            "name": "AgentRunner",
            "bases": [],
            "methods": [
              "__init__",
              "_signal_handler"
            ],
            "is_async": false,
            "line": 287
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "argparse"
            ]
          },
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "signal"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "task_queue"
            ]
          },
          {
            "type": "from",
            "module": "architect_agent",
            "names": [
              "ArchitectAgent"
            ]
          },
          {
            "type": "from",
            "module": "base_agent",
            "names": [
              "BaseAgent"
            ]
          },
          {
            "type": "from",
            "module": "devops_agent",
            "names": [
              "DevOpsAgent"
            ]
          },
          {
            "type": "from",
            "module": "meta_agent",
            "names": [
              "MetaAgent"
            ]
          },
          {
            "type": "from",
            "module": "qa_agent",
            "names": [
              "QAAgent"
            ]
          },
          {
            "type": "from",
            "module": "agents.architect_agent",
            "names": [
              "ArchitectAgent"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent"
            ]
          },
          {
            "type": "from",
            "module": "agents.devops_agent",
            "names": [
              "DevOpsAgent"
            ]
          },
          {
            "type": "from",
            "module": "agents.meta_agent",
            "names": [
              "MetaAgent"
            ]
          },
          {
            "type": "from",
            "module": "agents.qa_agent",
            "names": [
              "QAAgent"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "task_queue"
            ]
          }
        ],
        "size_lines": 390
      },
      {
        "file": "src/agents/meta_agent.py",
        "classes": [
          {
            "name": "ImprovementType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 40
          },
          {
            "name": "ImprovementProposal",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 53
          },
          {
            "name": "SystemAnalysis",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 70
          },
          {
            "name": "MetaAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__",
              "_invalidate_agents_cache",
              "_create_health_improvement_proposal"
            ],
            "is_async": false,
            "line": 82
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "core.context_engine",
            "names": [
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "core.message_broker",
            "names": [
              "MessageType",
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "core.models",
            "names": [
              "Agent"
            ]
          },
          {
            "type": "from",
            "module": "core.self_modifier",
            "names": [
              "SelfModifier"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task",
              "task_queue"
            ]
          },
          {
            "type": "from",
            "module": "base_agent",
            "names": [
              "BaseAgent",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.context_engine",
            "names": [
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "core.message_broker",
            "names": [
              "MessageType",
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "core.models",
            "names": [
              "Agent"
            ]
          },
          {
            "type": "from",
            "module": "core.self_modifier",
            "names": [
              "SelfModifier"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task",
              "task_queue"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "get_settings"
            ]
          }
        ],
        "size_lines": 1080
      },
      {
        "file": "src/agents/agent_factory.py",
        "classes": [
          {
            "name": "AgentFactory",
            "bases": [],
            "methods": [
              "create_agent",
              "get_available_types",
              "get_agent_capabilities",
              "get_agent_info",
              "create_agent_team",
              "create_balanced_team",
              "_generate_agent_name",
              "validate_agent_config"
            ],
            "is_async": false,
            "line": 16
          },
          {
            "name": "AgentCoordinator",
            "bases": [],
            "methods": [
              "__init__",
              "get_team_status"
            ],
            "is_async": false,
            "line": 303
          }
        ],
        "functions": [
          {
            "name": "create_qa_agent",
            "is_async": false,
            "args": [
              "name"
            ],
            "line": 270
          },
          {
            "name": "create_architect_agent",
            "is_async": false,
            "args": [
              "name"
            ],
            "line": 275
          },
          {
            "name": "create_devops_agent",
            "is_async": false,
            "args": [
              "name"
            ],
            "line": 280
          },
          {
            "name": "create_meta_agent",
            "is_async": false,
            "args": [
              "name"
            ],
            "line": 285
          },
          {
            "name": "create_development_team",
            "is_async": false,
            "args": [],
            "line": 290
          }
        ],
        "imports": [
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "architect_agent",
            "names": [
              "ArchitectAgent"
            ]
          },
          {
            "type": "from",
            "module": "base_agent",
            "names": [
              "BaseAgent"
            ]
          },
          {
            "type": "from",
            "module": "devops_agent",
            "names": [
              "DevOpsAgent"
            ]
          },
          {
            "type": "from",
            "module": "meta_agent",
            "names": [
              "MetaAgent"
            ]
          },
          {
            "type": "from",
            "module": "qa_agent",
            "names": [
              "QAAgent"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          }
        ],
        "size_lines": 403
      },
      {
        "file": "src/agents/base_agent.py",
        "classes": [
          {
            "name": "HealthStatus",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 44
          },
          {
            "name": "ToolResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 54
          },
          {
            "name": "TaskResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 65
          },
          {
            "name": "CLIToolManager",
            "bases": [],
            "methods": [
              "__init__",
              "_detect_available_tools",
              "_check_tool_available",
              "_select_preferred_tool",
              "_get_tool_configs"
            ],
            "is_async": false,
            "line": 74
          },
          {
            "name": "BaseAgent",
            "bases": [
              "ABC"
            ],
            "methods": [
              "__init__",
              "_setup_message_handlers",
              "_get_capabilities",
              "capabilities"
            ],
            "is_async": false,
            "line": 324
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "abc",
            "names": [
              "ABC",
              "abstractmethod"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "core.async_db",
            "names": [
              "get_async_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "CLIToolType",
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "core.context_engine",
            "names": [
              "ContextSearchResult",
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "core.message_broker",
            "names": [
              "Message",
              "MessageHandler",
              "MessageType",
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "core.persistent_cli",
            "names": [
              "get_persistent_cli_manager"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task",
              "task_queue"
            ]
          },
          {
            "type": "from",
            "module": "core.async_db",
            "names": [
              "get_async_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "CLIToolType",
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.context_engine",
            "names": [
              "ContextSearchResult",
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "core.message_broker",
            "names": [
              "Message",
              "MessageHandler",
              "MessageType",
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "core.persistent_cli",
            "names": [
              "get_persistent_cli_manager"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task",
              "task_queue"
            ]
          },
          {
            "type": "from",
            "module": "core.enhanced_message_broker",
            "names": [
              "ContextShareType"
            ]
          },
          {
            "type": "from",
            "module": "core.enhanced_message_broker",
            "names": [
              "MessagePriority"
            ]
          },
          {
            "type": "from",
            "module": "core.agent_coordination",
            "names": [
              "CollaborationType",
              "coordination_system"
            ]
          },
          {
            "type": "from",
            "module": "core.enhanced_message_broker",
            "names": [
              "get_enhanced_message_broker"
            ]
          },
          {
            "type": "from",
            "module": "core.realtime_collaboration",
            "names": [
              "get_collaboration_sync"
            ]
          },
          {
            "type": "from",
            "module": "core.agent_coordination",
            "names": [
              "CollaborationType",
              "coordination_system"
            ]
          }
        ],
        "size_lines": 1729
      },
      {
        "file": "src/agents/qa_agent.py",
        "classes": [
          {
            "name": "QAAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__",
              "_calculate_quality_score",
              "_extract_coverage_from_output",
              "_extract_recommendations",
              "_generate_quality_recommendations",
              "_generate_security_recommendations",
              "_identify_deployment_blockers"
            ],
            "is_async": false,
            "line": 30
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "core.testing.ai_test_generator",
            "names": [
              "AITestGenerator",
              "TestType"
            ]
          },
          {
            "type": "from",
            "module": "base_agent",
            "names": [
              "BaseAgent",
              "HealthStatus",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent",
              "HealthStatus",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "core.testing.ai_test_generator",
            "names": [
              "AITestGenerator",
              "TestType"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "task_queue"
            ]
          },
          {
            "type": "import",
            "names": [
              "re"
            ]
          }
        ],
        "size_lines": 846
      },
      {
        "file": "src/agents/architect_agent.py",
        "classes": [
          {
            "name": "ArchitectAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__",
              "_determine_architecture_task_type",
              "_generate_architecture_recommendations",
              "_generate_improvement_recommendations",
              "_identify_common_issues",
              "_assess_refactoring_risks",
              "_generate_architectural_insights",
              "_extract_architectural_decisions",
              "_extract_technology_stack",
              "_identify_patterns",
              "_assess_design_complexity",
              "_assess_design_completeness",
              "_extract_recommendations",
              "_identify_priority_issues",
              "_assess_technical_debt",
              "_assess_architecture_quality",
              "_extract_refactoring_phases",
              "_extract_risks",
              "_extract_effort_estimates",
              "_extract_timeline",
              "_assess_refactoring_complexity",
              "_extract_api_endpoints",
              "_extract_auth_strategy",
              "_extract_api_specs",
              "_assess_api_design_completeness",
              "_extract_database_tables",
              "_extract_indexes",
              "_extract_relationships",
              "_assess_database_complexity"
            ],
            "is_async": false,
            "line": 28
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "os"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "base_agent",
            "names": [
              "BaseAgent",
              "HealthStatus",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent",
              "HealthStatus",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "task_queue"
            ]
          },
          {
            "type": "import",
            "names": [
              "re"
            ]
          }
        ],
        "size_lines": 1373
      },
      {
        "file": "src/agents/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [],
        "size_lines": 0
      },
      {
        "file": "src/agents/devops_agent.py",
        "classes": [
          {
            "name": "DevOpsAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__",
              "_extract_config_files",
              "_estimate_infrastructure_cost",
              "_count_infrastructure_components",
              "_assess_security_configuration",
              "_extract_dashboards",
              "_extract_alert_rules",
              "_count_metrics",
              "_count_alerts",
              "_assess_monitoring_coverage",
              "_extract_pipeline_stages",
              "_estimate_build_time",
              "_count_pipeline_stages",
              "_count_security_checks",
              "_create_incident_timeline",
              "_extract_mitigation_steps"
            ],
            "is_async": false,
            "line": 25
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "base_agent",
            "names": [
              "BaseAgent",
              "HealthStatus",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent",
              "HealthStatus",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "task_queue"
            ]
          }
        ],
        "size_lines": 829
      },
      {
        "file": "src/agents/developer_agent.py",
        "classes": [
          {
            "name": "DeveloperAgent",
            "bases": [
              "BaseAgent"
            ],
            "methods": [
              "__init__",
              "get_capabilities",
              "track_task_completion",
              "track_specialization",
              "get_specializations",
              "_create_implementation_prompt",
              "_create_tdd_prompt",
              "_create_bug_fix_prompt",
              "_estimate_code_lines",
              "_calculate_cyclomatic_complexity"
            ],
            "is_async": false,
            "line": 30
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "ast"
            ]
          },
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "re"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "base_agent",
            "names": [
              "BaseAgent",
              "HealthStatus",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent",
              "HealthStatus",
              "TaskResult"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          }
        ],
        "size_lines": 640
      }
    ],
    "core_services": [
      {
        "file": "src/core/enhanced_performance_optimizer.py",
        "classes": [
          {
            "name": "QueryMetrics",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 26
          },
          {
            "name": "PerformanceReport",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 39
          },
          {
            "name": "QueryAnalyzer",
            "bases": [],
            "methods": [
              "__init__",
              "get_slow_queries",
              "generate_recommendations"
            ],
            "is_async": false,
            "line": 50
          },
          {
            "name": "DatabaseHealthMonitor",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 160
          },
          {
            "name": "EnhancedPerformanceOptimizer",
            "bases": [],
            "methods": [
              "__init__",
              "get_performance_summary"
            ],
            "is_async": false,
            "line": 287
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "text"
            ]
          },
          {
            "type": "from",
            "module": "caching",
            "names": [
              "get_cache_manager"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "get_database_manager"
            ]
          }
        ],
        "size_lines": 486
      },
      {
        "file": "src/core/auth.py",
        "classes": [
          {
            "name": "AuthenticationError",
            "bases": [
              "HTTPException"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 15
          },
          {
            "name": "AuthorizationError",
            "bases": [
              "HTTPException"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 26
          },
          {
            "name": "RateLimitError",
            "bases": [
              "HTTPException"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 33
          },
          {
            "name": "SecurityMiddleware",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 205
          },
          {
            "name": "Permissions",
            "bases": [],
            "methods": [
              "system_read",
              "system_write",
              "agent_read",
              "agent_write",
              "agent_spawn",
              "agent_terminate",
              "task_read",
              "task_write",
              "task_create",
              "message_read",
              "message_send",
              "metrics_read",
              "modification_read",
              "modification_propose",
              "context_read",
              "context_write"
            ],
            "is_async": false,
            "line": 230
          }
        ],
        "functions": [
          {
            "name": "get_client_ip",
            "is_async": false,
            "args": [
              "request"
            ],
            "line": 44
          },
          {
            "name": "require_permissions",
            "is_async": false,
            "args": [],
            "line": 137
          },
          {
            "name": "require_admin",
            "is_async": false,
            "args": [],
            "line": 168
          },
          {
            "name": "rate_limit",
            "is_async": false,
            "args": [
              "limit"
            ],
            "line": 186
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "fastapi",
            "names": [
              "Depends",
              "HTTPException",
              "Request",
              "status"
            ]
          },
          {
            "type": "from",
            "module": "fastapi.security",
            "names": [
              "HTTPAuthorizationCredentials",
              "HTTPBearer"
            ]
          },
          {
            "type": "from",
            "module": "security",
            "names": [
              "Permission",
              "User",
              "security_manager"
            ]
          },
          {
            "type": "from",
            "module": "security",
            "names": [
              "User"
            ]
          }
        ],
        "size_lines": 297
      },
      {
        "file": "src/core/communication_monitor.py",
        "classes": [
          {
            "name": "MetricType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 19
          },
          {
            "name": "AlertSeverity",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 32
          },
          {
            "name": "CommunicationMetric",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 42
          },
          {
            "name": "PerformanceThreshold",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 56
          },
          {
            "name": "PerformanceAlert",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 69
          },
          {
            "name": "AgentCommunicationProfile",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 85
          },
          {
            "name": "CommunicationMonitor",
            "bases": [],
            "methods": [
              "__init__",
              "_get_recent_metrics_for_agent"
            ],
            "is_async": false,
            "line": 104
          }
        ],
        "functions": [
          {
            "name": "get_communication_monitor",
            "is_async": false,
            "args": [],
            "line": 476
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Dict",
              "List",
              "Optional",
              "Set",
              "Tuple"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict",
              "deque"
            ]
          },
          {
            "type": "import",
            "names": [
              "statistics"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          }
        ],
        "size_lines": 478
      },
      {
        "file": "src/core/enums.py",
        "classes": [
          {
            "name": "AgentStatus",
            "bases": [
              "str",
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 6
          },
          {
            "name": "TaskStatus",
            "bases": [
              "str",
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 19
          },
          {
            "name": "TaskPriority",
            "bases": [
              "str",
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 30
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          }
        ],
        "size_lines": 36
      },
      {
        "file": "src/core/task_queue.py",
        "classes": [
          {
            "name": "TaskPriority",
            "bases": [
              "IntEnum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "TaskStatus",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 30
          },
          {
            "name": "Task",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 41
          },
          {
            "name": "QueueStats",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 64
          },
          {
            "name": "TaskQueue",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 77
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "IntEnum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "redis.asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "pydantic",
            "names": [
              "BaseModel",
              "Field"
            ]
          },
          {
            "type": "from",
            "module": "caching",
            "names": [
              "TASK_QUEUE_CACHE_CONFIG",
              "CacheKey",
              "get_cache_manager"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "get_settings"
            ]
          }
        ],
        "size_lines": 910
      },
      {
        "file": "src/core/config.py",
        "classes": [
          {
            "name": "EnvironmentType",
            "bases": [
              "str",
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 11
          },
          {
            "name": "CLIToolType",
            "bases": [
              "str",
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "EmbeddingProvider",
            "bases": [
              "str",
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 28
          },
          {
            "name": "Settings",
            "bases": [
              "BaseSettings"
            ],
            "methods": [
              "is_development",
              "is_production",
              "database_config",
              "redis_config",
              "cli_tools_config",
              "embedding_config",
              "get_tmux_session_name",
              "get_log_file_path",
              "get_workspace_path",
              "validate_configuration"
            ],
            "is_async": false,
            "line": 36
          },
          {
            "name": "Config",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 163
          }
        ],
        "functions": [
          {
            "name": "validate_environment",
            "is_async": false,
            "args": [],
            "line": 273
          },
          {
            "name": "get_database_url",
            "is_async": false,
            "args": [],
            "line": 284
          },
          {
            "name": "get_redis_url",
            "is_async": false,
            "args": [],
            "line": 289
          },
          {
            "name": "get_cli_tool_preference",
            "is_async": false,
            "args": [],
            "line": 294
          },
          {
            "name": "is_development_mode",
            "is_async": false,
            "args": [],
            "line": 299
          },
          {
            "name": "get_agent_config",
            "is_async": false,
            "args": [],
            "line": 304
          },
          {
            "name": "get_api_config",
            "is_async": false,
            "args": [],
            "line": 314
          },
          {
            "name": "get_settings",
            "is_async": false,
            "args": [],
            "line": 325
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "os"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "from",
            "module": "pydantic",
            "names": [
              "Field"
            ]
          },
          {
            "type": "from",
            "module": "pydantic_settings",
            "names": [
              "BaseSettings"
            ]
          }
        ],
        "size_lines": 327
      },
      {
        "file": "src/core/cli_git_integration.py",
        "classes": [
          {
            "name": "WorkflowType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 18
          },
          {
            "name": "WorkflowStatus",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 29
          },
          {
            "name": "WorkflowContext",
            "bases": [],
            "methods": [
              "__post_init__"
            ],
            "is_async": false,
            "line": 43
          },
          {
            "name": "CLIExecutionContext",
            "bases": [],
            "methods": [
              "__post_init__"
            ],
            "is_async": false,
            "line": 77
          },
          {
            "name": "ExecutionResult",
            "bases": [],
            "methods": [
              "__post_init__"
            ],
            "is_async": false,
            "line": 97
          },
          {
            "name": "GitWorkflowManager",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 118
          },
          {
            "name": "EnhancedCLIExecutor",
            "bases": [],
            "methods": [
              "__init__",
              "_determine_workflow_type",
              "_generate_commit_message",
              "_evaluate_success_criteria"
            ],
            "is_async": false,
            "line": 351
          }
        ],
        "functions": [
          {
            "name": "get_enhanced_cli_executor",
            "is_async": false,
            "args": [
              "workspace_path"
            ],
            "line": 695
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "os"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          }
        ],
        "size_lines": 704
      },
      {
        "file": "src/core/realtime_collaboration.py",
        "classes": [
          {
            "name": "CollaborationState",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 25
          },
          {
            "name": "ConflictResolutionStrategy",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 36
          },
          {
            "name": "CollaborativeSession",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 47
          },
          {
            "name": "SyncOperation",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 67
          },
          {
            "name": "ConflictResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 81
          },
          {
            "name": "RealTimeCollaborationSync",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 93
          }
        ],
        "functions": [
          {
            "name": "get_collaboration_sync",
            "is_async": false,
            "args": [
              "enhanced_broker"
            ],
            "line": 1154
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Dict",
              "List",
              "Optional",
              "Set",
              "Callable"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "enhanced_message_broker",
            "names": [
              "EnhancedMessageBroker",
              "ContextShareType",
              "SyncMode",
              "AgentState"
            ]
          },
          {
            "type": "from",
            "module": "communication_monitor",
            "names": [
              "get_communication_monitor"
            ]
          },
          {
            "type": "from",
            "module": "communication_monitor",
            "names": [
              "CommunicationMetric",
              "MetricType"
            ]
          }
        ],
        "size_lines": 1163
      },
      {
        "file": "src/core/security.py",
        "classes": [
          {
            "name": "User",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "Permission",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 36
          },
          {
            "name": "SecurityConfig",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 76
          },
          {
            "name": "SecurityManager",
            "bases": [],
            "methods": [
              "__init__",
              "hash_password",
              "verify_password",
              "create_user",
              "get_user_by_username",
              "authenticate_user",
              "create_access_token",
              "create_refresh_token",
              "verify_token",
              "check_permission",
              "require_permissions",
              "check_rate_limit",
              "generate_api_key",
              "get_security_headers",
              "validate_input",
              "sanitize_filename"
            ],
            "is_async": false,
            "line": 109
          }
        ],
        "functions": [
          {
            "name": "create_default_admin",
            "is_async": false,
            "args": [],
            "line": 357
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "secrets"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "jwt"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "passlib.context",
            "names": [
              "CryptContext"
            ]
          },
          {
            "type": "from",
            "module": "pydantic",
            "names": [
              "BaseModel",
              "Field"
            ]
          }
        ],
        "size_lines": 396
      },
      {
        "file": "src/core/constants.py",
        "classes": [
          {
            "name": "Intervals",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 9
          },
          {
            "name": "Limits",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 58
          },
          {
            "name": "Timeouts",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 87
          },
          {
            "name": "Priorities",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 109
          },
          {
            "name": "Thresholds",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 127
          },
          {
            "name": "RetryConfig",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 148
          },
          {
            "name": "LogLevels",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 164
          },
          {
            "name": "CacheConfig",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 178
          },
          {
            "name": "FeatureFlags",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 192
          }
        ],
        "functions": [],
        "imports": [],
        "size_lines": 215
      },
      {
        "file": "src/core/load_balancer.py",
        "classes": [
          {
            "name": "LoadBalancingStrategy",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 25
          },
          {
            "name": "AgentLoad",
            "bases": [],
            "methods": [
              "load_factor",
              "efficiency_score",
              "is_available"
            ],
            "is_async": false,
            "line": 36
          },
          {
            "name": "TaskRequirement",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 80
          },
          {
            "name": "IntelligentLoadBalancer",
            "bases": [],
            "methods": [
              "__init__",
              "_extract_required_capabilities",
              "_estimate_task_duration",
              "_round_robin_assignment",
              "_least_loaded_assignment",
              "_capability_based_assignment",
              "_performance_weighted_assignment",
              "_hybrid_intelligent_assignment",
              "get_load_balancing_stats",
              "_calculate_performance_summary"
            ],
            "is_async": false,
            "line": 93
          }
        ],
        "functions": [
          {
            "name": "get_load_balancer",
            "is_async": false,
            "args": [],
            "line": 590
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict",
              "deque"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Dict",
              "List",
              "Optional",
              "Set",
              "Tuple"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "enums",
            "names": [
              "AgentStatus",
              "TaskPriority"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Agent",
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "orchestrator",
            "names": [
              "get_orchestrator"
            ]
          },
          {
            "type": "from",
            "module": "task_queue",
            "names": [
              "task_queue"
            ]
          }
        ],
        "size_lines": 592
      },
      {
        "file": "src/core/persistent_cli.py",
        "classes": [
          {
            "name": "CLISession",
            "bases": [],
            "methods": [
              "__post_init__"
            ],
            "is_async": false,
            "line": 17
          },
          {
            "name": "PersistentCLIManager",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 39
          }
        ],
        "functions": [
          {
            "name": "get_persistent_cli_manager",
            "is_async": false,
            "args": [
              "workspace_dir"
            ],
            "line": 497
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "os"
            ]
          },
          {
            "type": "import",
            "names": [
              "tempfile"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "constants",
            "names": [
              "Intervals"
            ]
          }
        ],
        "size_lines": 504
      },
      {
        "file": "src/core/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [],
        "size_lines": 0
      },
      {
        "file": "src/core/sleep_wake_manager.py",
        "classes": [
          {
            "name": "SystemState",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 26
          },
          {
            "name": "ConsolidationPhase",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 36
          },
          {
            "name": "SleepSchedule",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 49
          },
          {
            "name": "SleepMetrics",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 61
          },
          {
            "name": "WakeMetrics",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 76
          },
          {
            "name": "SystemCheckpoint",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 88
          },
          {
            "name": "PerformanceMonitor",
            "bases": [],
            "methods": [
              "__init__",
              "identify_performance_issues",
              "suggest_optimizations"
            ],
            "is_async": false,
            "line": 101
          },
          {
            "name": "SleepWakeManager",
            "bases": [],
            "methods": [
              "__init__",
              "force_wake",
              "get_sleep_stats",
              "_get_next_sleep_time"
            ],
            "is_async": false,
            "line": 240
          }
        ],
        "functions": [
          {
            "name": "get_sleep_wake_manager",
            "is_async": false,
            "args": [
              "schedule"
            ],
            "line": 865
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "collections.abc",
            "names": [
              "Callable"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "asdict",
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "advanced_context_engine",
            "names": [
              "MemoryConsolidationStats",
              "get_advanced_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "message_broker",
            "names": [
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Agent",
              "SystemMetric",
              "get_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "task_queue",
            "names": [
              "task_queue"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          }
        ],
        "size_lines": 872
      },
      {
        "file": "src/core/self_bootstrap.py",
        "classes": [
          {
            "name": "DevelopmentPhase",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "DevelopmentGoal",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 32
          },
          {
            "name": "SystemCapability",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 48
          },
          {
            "name": "SelfBootstrapper",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 59
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task",
              "TaskPriority",
              "TaskStatus",
              "task_queue"
            ]
          }
        ],
        "size_lines": 720
      },
      {
        "file": "src/core/shared_knowledge_base.py",
        "classes": [
          {
            "name": "KnowledgeType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 22
          },
          {
            "name": "LearningMode",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 35
          },
          {
            "name": "KnowledgeItem",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 46
          },
          {
            "name": "LearningSession",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 69
          },
          {
            "name": "KnowledgeQuery",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 84
          },
          {
            "name": "SharedKnowledgeBase",
            "bases": [],
            "methods": [
              "__init__",
              "_context_matches"
            ],
            "is_async": false,
            "line": 96
          }
        ],
        "functions": [
          {
            "name": "get_shared_knowledge_base",
            "is_async": false,
            "args": [
              "context_engine",
              "message_broker"
            ],
            "line": 1178
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Dict",
              "List",
              "Optional",
              "Set",
              "Tuple"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "context_engine",
            "names": [
              "ContextEngine"
            ]
          },
          {
            "type": "from",
            "module": "enhanced_message_broker",
            "names": [
              "EnhancedMessageBroker",
              "ContextShareType"
            ]
          },
          {
            "type": "from",
            "module": "communication_monitor",
            "names": [
              "get_communication_monitor"
            ]
          },
          {
            "type": "from",
            "module": "communication_monitor",
            "names": [
              "CommunicationMetric",
              "MetricType"
            ]
          }
        ],
        "size_lines": 1187
      },
      {
        "file": "src/core/short_id_resolver.py",
        "classes": [
          {
            "name": "ShortIDResolver",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 10
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Agent",
              "Session",
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "short_id",
            "names": [
              "ShortIDGenerator"
            ]
          },
          {
            "type": "from",
            "module": "async_db",
            "names": [
              "get_async_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "or_",
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "or_",
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          }
        ],
        "size_lines": 211
      },
      {
        "file": "src/core/caching.py",
        "classes": [
          {
            "name": "CacheStrategy",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 24
          },
          {
            "name": "CacheLevel",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 34
          },
          {
            "name": "CacheConfig",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 43
          },
          {
            "name": "CacheStats",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 56
          },
          {
            "name": "CacheKey",
            "bases": [],
            "methods": [
              "generate",
              "pattern"
            ],
            "is_async": false,
            "line": 68
          },
          {
            "name": "CacheInvalidator",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 87
          },
          {
            "name": "MultiLevelCache",
            "bases": [],
            "methods": [
              "__init__",
              "_serialize",
              "_deserialize",
              "_update_response_time"
            ],
            "is_async": false,
            "line": 120
          },
          {
            "name": "CacheManager",
            "bases": [],
            "methods": [
              "__init__",
              "get_cache",
              "cached"
            ],
            "is_async": false,
            "line": 335
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "hashlib"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "collections.abc",
            "names": [
              "Callable"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "redis.asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "get_settings"
            ]
          }
        ],
        "size_lines": 562
      },
      {
        "file": "src/core/orchestrator.py",
        "classes": [
          {
            "name": "AgentInfo",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 26
          },
          {
            "name": "SystemHealth",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 46
          },
          {
            "name": "AgentRegistry",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 59
          },
          {
            "name": "AgentSpawner",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 252
          },
          {
            "name": "HealthMonitor",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 401
          },
          {
            "name": "AgentOrchestrator",
            "bases": [],
            "methods": [
              "__init__",
              "_get_default_capabilities"
            ],
            "is_async": false,
            "line": 575
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "async_db",
            "names": [
              "get_async_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "enums",
            "names": [
              "AgentStatus"
            ]
          },
          {
            "type": "from",
            "module": "message_broker",
            "names": [
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Agent"
            ]
          },
          {
            "type": "from",
            "module": "short_id",
            "names": [
              "ShortIDGenerator"
            ]
          },
          {
            "type": "from",
            "module": "task_queue",
            "names": [
              "Task",
              "task_queue"
            ]
          },
          {
            "type": "from",
            "module": "tmux_manager",
            "names": [
              "get_tmux_manager",
              "TmuxOperationResult"
            ]
          },
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "os"
            ]
          },
          {
            "type": "from",
            "module": "async_db",
            "names": [
              "get_async_database_manager"
            ]
          }
        ],
        "size_lines": 873
      },
      {
        "file": "src/core/real_time_monitoring.py",
        "classes": [
          {
            "name": "PerformanceAlert",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 24
          },
          {
            "name": "MetricThreshold",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 40
          },
          {
            "name": "RealTimeMonitor",
            "bases": [],
            "methods": [
              "__init__",
              "_setup_default_thresholds",
              "remove_websocket_connection",
              "acknowledge_alert",
              "get_dashboard_data"
            ],
            "is_async": false,
            "line": 52
          }
        ],
        "functions": [
          {
            "name": "get_real_time_monitor",
            "is_async": false,
            "args": [],
            "line": 534
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict",
              "deque"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "asdict",
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Dict",
              "List",
              "Optional"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "fastapi",
            "names": [
              "WebSocket"
            ]
          },
          {
            "type": "from",
            "module": "analytics",
            "names": [
              "PerformanceCollector",
              "PerformanceMetric",
              "SystemResource"
            ]
          }
        ],
        "size_lines": 536
      },
      {
        "file": "src/core/advanced_context_engine.py",
        "classes": [
          {
            "name": "MemoryLayer",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "ContextType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 30
          },
          {
            "name": "ContextSearchResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 45
          },
          {
            "name": "ConsolidationRule",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 58
          },
          {
            "name": "KnowledgePattern",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 70
          },
          {
            "name": "MemoryConsolidationStats",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 83
          },
          {
            "name": "PatternRecognizer",
            "bases": [],
            "methods": [
              "__init__",
              "_find_common_themes"
            ],
            "is_async": false,
            "line": 95
          },
          {
            "name": "MemoryConsolidator",
            "bases": [],
            "methods": [
              "__init__",
              "_initialize_consolidation_rules"
            ],
            "is_async": false,
            "line": 282
          },
          {
            "name": "AdvancedContextEngine",
            "bases": [],
            "methods": [
              "__init__",
              "_determine_initial_layer",
              "_rank_search_results"
            ],
            "is_async": false,
            "line": 443
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "hashlib"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "numpy"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "and_",
              "desc",
              "func"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.orm",
            "names": [
              "Session"
            ]
          },
          {
            "type": "from",
            "module": "context_engine",
            "names": [
              "EmbeddingProvider",
              "EmbeddingService"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Context",
              "get_database_manager"
            ]
          }
        ],
        "size_lines": 873
      },
      {
        "file": "src/core/tmux_manager.py",
        "classes": [
          {
            "name": "TmuxSessionStatus",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 16
          },
          {
            "name": "TmuxSession",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 27
          },
          {
            "name": "TmuxOperationResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 40
          },
          {
            "name": "TmuxError",
            "bases": [
              "Exception"
            ],
            "methods": [],
            "is_async": false,
            "line": 52
          },
          {
            "name": "TmuxSessionNotFoundError",
            "bases": [
              "TmuxError"
            ],
            "methods": [],
            "is_async": false,
            "line": 58
          },
          {
            "name": "TmuxCommandTimeoutError",
            "bases": [
              "TmuxError"
            ],
            "methods": [],
            "is_async": false,
            "line": 64
          },
          {
            "name": "TmuxRetryExhaustedError",
            "bases": [
              "TmuxError"
            ],
            "methods": [],
            "is_async": false,
            "line": 70
          },
          {
            "name": "RetryableTmuxManager",
            "bases": [],
            "methods": [
              "__init__",
              "_is_circuit_breaker_open",
              "_record_failure",
              "_record_success",
              "get_session_info",
              "get_all_tracked_sessions",
              "get_failure_stats"
            ],
            "is_async": false,
            "line": 76
          }
        ],
        "functions": [
          {
            "name": "get_tmux_manager",
            "is_async": false,
            "args": [],
            "line": 623
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Optional"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "import",
            "names": [
              "os"
            ]
          }
        ],
        "size_lines": 628
      },
      {
        "file": "src/core/context_engine.py",
        "classes": [
          {
            "name": "EmbeddingProvider",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "MemoryLayer",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 28
          },
          {
            "name": "ContextType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 38
          },
          {
            "name": "ContextSearchResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 54
          },
          {
            "name": "MemoryStats",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 67
          },
          {
            "name": "ConsolidationRule",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 83
          },
          {
            "name": "KnowledgePattern",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 95
          },
          {
            "name": "EmbeddingService",
            "bases": [],
            "methods": [
              "__init__",
              "_initialize_provider",
              "_initialize_sentence_transformers",
              "_initialize_ollama"
            ],
            "is_async": false,
            "line": 107
          },
          {
            "name": "ContextCompressor",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 230
          },
          {
            "name": "SemanticSearch",
            "bases": [],
            "methods": [
              "__init__",
              "_calculate_text_similarity",
              "_calculate_relevance"
            ],
            "is_async": false,
            "line": 320
          },
          {
            "name": "MemoryConsolidator",
            "bases": [],
            "methods": [
              "__init__",
              "_group_contexts"
            ],
            "is_async": false,
            "line": 404
          },
          {
            "name": "ContextEngine",
            "bases": [],
            "methods": [
              "__init__",
              "_extract_topic"
            ],
            "is_async": false,
            "line": 534
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.ext.asyncio",
            "names": [
              "AsyncSession",
              "async_sessionmaker",
              "create_async_engine"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.future",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.orm",
            "names": [
              "Session"
            ]
          },
          {
            "type": "from",
            "module": "caching",
            "names": [
              "CONTEXT_CACHE_CONFIG",
              "CacheKey",
              "get_cache_manager"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Context",
              "get_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "sentence_transformers",
            "names": [
              "SentenceTransformer"
            ]
          },
          {
            "type": "import",
            "names": [
              "requests"
            ]
          },
          {
            "type": "import",
            "names": [
              "aiohttp"
            ]
          },
          {
            "type": "from",
            "module": "aiohttp",
            "names": [
              "ClientError",
              "ClientTimeout"
            ]
          },
          {
            "type": "import",
            "names": [
              "openai"
            ]
          }
        ],
        "size_lines": 985
      },
      {
        "file": "src/core/async_db.py",
        "classes": [
          {
            "name": "DatabaseConnectionError",
            "bases": [
              "Exception"
            ],
            "methods": [],
            "is_async": false,
            "line": 24
          },
          {
            "name": "DatabaseOperationError",
            "bases": [
              "Exception"
            ],
            "methods": [],
            "is_async": false,
            "line": 30
          },
          {
            "name": "AsyncDatabaseManager",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 36
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "text"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.ext.asyncio",
            "names": [
              "AsyncSession",
              "async_sessionmaker",
              "create_async_engine"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Agent"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Base",
              "Context",
              "SystemMetric",
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Agent"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Base",
              "Context",
              "SystemMetric",
              "Task"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "update"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "and_",
              "update"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "func",
              "select"
            ]
          },
          {
            "type": "from",
            "module": "short_id",
            "names": [
              "ShortIDGenerator"
            ]
          }
        ],
        "size_lines": 478
      },
      {
        "file": "src/core/enhanced_routing.py",
        "classes": [
          {
            "name": "DeliveryGuarantee",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "RouteStrategy",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 30
          },
          {
            "name": "MessageStatus",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 41
          },
          {
            "name": "DeliveryReceipt",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 54
          },
          {
            "name": "RouteEntry",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 66
          },
          {
            "name": "QueuedMessage",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 78
          },
          {
            "name": "EnhancedMessageRouter",
            "bases": [],
            "methods": [
              "__init__",
              "_pattern_matches",
              "_create_message_fingerprint"
            ],
            "is_async": false,
            "line": 91
          }
        ],
        "functions": [
          {
            "name": "get_enhanced_router",
            "is_async": false,
            "args": [
              "message_broker"
            ],
            "line": 688
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Dict",
              "List",
              "Optional",
              "Set",
              "Callable",
              "Tuple"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "message_broker",
            "names": [
              "Message",
              "MessageType",
              "MessageBroker"
            ]
          }
        ],
        "size_lines": 695
      },
      {
        "file": "src/core/communication_performance_dashboard.py",
        "classes": [
          {
            "name": "SystemHealthStatus",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 27
          },
          {
            "name": "CommunicationPerformanceDashboard",
            "bases": [],
            "methods": [
              "__init__",
              "_identify_top_performing_agents",
              "_calculate_agent_performance_summary"
            ],
            "is_async": false,
            "line": 38
          }
        ],
        "functions": [
          {
            "name": "get_performance_dashboard",
            "is_async": false,
            "args": [
              "enhanced_broker",
              "collaboration_sync",
              "knowledge_base"
            ],
            "line": 494
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Dict",
              "List",
              "Optional"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "communication_monitor",
            "names": [
              "get_communication_monitor"
            ]
          },
          {
            "type": "from",
            "module": "enhanced_message_broker",
            "names": [
              "EnhancedMessageBroker"
            ]
          },
          {
            "type": "from",
            "module": "realtime_collaboration",
            "names": [
              "RealTimeCollaborationSync"
            ]
          },
          {
            "type": "from",
            "module": "shared_knowledge_base",
            "names": [
              "SharedKnowledgeBase"
            ]
          }
        ],
        "size_lines": 507
      },
      {
        "file": "src/core/self_modifier.py",
        "classes": [
          {
            "name": "ModificationType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 18
          },
          {
            "name": "ModificationStatus",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 30
          },
          {
            "name": "CodeChange",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 43
          },
          {
            "name": "ModificationProposal",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 54
          },
          {
            "name": "TestResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 71
          },
          {
            "name": "ValidationResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 83
          },
          {
            "name": "ModificationRecord",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 97
          },
          {
            "name": "GitManager",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 111
          },
          {
            "name": "SandboxTester",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 257
          },
          {
            "name": "SecurityScanner",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 392
          },
          {
            "name": "SelfModifier",
            "bases": [],
            "methods": [
              "__init__",
              "_get_default_test_commands",
              "_get_validation_criteria",
              "_assess_risk_level",
              "_estimate_impact",
              "_check_performance_impact",
              "_generate_recommendations",
              "_check_rate_limits",
              "get_modification_stats"
            ],
            "is_async": false,
            "line": 445
          }
        ],
        "functions": [
          {
            "name": "get_self_modifier",
            "is_async": false,
            "args": [
              "workspace_path"
            ],
            "line": 1048
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "os"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent"
            ]
          }
        ],
        "size_lines": 1057
      },
      {
        "file": "src/core/analytics.py",
        "classes": [
          {
            "name": "PerformanceMetric",
            "bases": [],
            "methods": [
              "to_dict"
            ],
            "is_async": false,
            "line": 18
          },
          {
            "name": "SystemResource",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 32
          },
          {
            "name": "AgentPerformance",
            "bases": [],
            "methods": [
              "to_dict"
            ],
            "is_async": false,
            "line": 51
          },
          {
            "name": "APIPerformance",
            "bases": [],
            "methods": [
              "to_dict"
            ],
            "is_async": false,
            "line": 71
          },
          {
            "name": "PerformanceCollector",
            "bases": [],
            "methods": [
              "__init__",
              "record_api_request",
              "record_agent_performance",
              "get_system_health_score",
              "get_api_performance_summary",
              "get_performance_alerts",
              "get_metrics_summary",
              "export_metrics"
            ],
            "is_async": false,
            "line": 90
          },
          {
            "name": "PerformanceMiddleware",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 619
          }
        ],
        "functions": [
          {
            "name": "get_performance_collector",
            "is_async": false,
            "args": [],
            "line": 672
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "statistics"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict",
              "deque"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "asdict",
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          }
        ],
        "size_lines": 674
      },
      {
        "file": "src/core/short_id.py",
        "classes": [
          {
            "name": "ShortIDGenerator",
            "bases": [],
            "methods": [
              "generate_agent_short_id",
              "generate_task_short_id",
              "generate_session_short_id",
              "generate_unique_agent_short_id",
              "is_valid_short_id",
              "search_short_id_candidates"
            ],
            "is_async": false,
            "line": 7
          }
        ],
        "functions": [
          {
            "name": "generate_short_id",
            "is_async": false,
            "args": [
              "name",
              "uuid_str",
              "id_type"
            ],
            "line": 175
          },
          {
            "name": "resolve_short_id",
            "is_async": false,
            "args": [
              "short_id",
              "id_type"
            ],
            "line": 189
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "hashlib"
            ]
          },
          {
            "type": "import",
            "names": [
              "string"
            ]
          }
        ],
        "size_lines": 193
      },
      {
        "file": "src/core/performance_optimizer.py",
        "classes": [
          {
            "name": "OptimizationStrategy",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 19
          },
          {
            "name": "PerformanceMetric",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 30
          },
          {
            "name": "PerformanceTarget",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 42
          },
          {
            "name": "OptimizationAction",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 52
          },
          {
            "name": "PredictionModel",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 64
          },
          {
            "name": "WorkloadPrediction",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 76
          },
          {
            "name": "TimeSeriesAnalyzer",
            "bases": [],
            "methods": [
              "__init__",
              "add_data_point",
              "detect_trend",
              "detect_seasonality",
              "predict_next_values"
            ],
            "is_async": false,
            "line": 87
          },
          {
            "name": "ResourcePredictor",
            "bases": [],
            "methods": [
              "__init__",
              "_initialize_models",
              "_apply_model"
            ],
            "is_async": false,
            "line": 204
          },
          {
            "name": "PerformanceOptimizer",
            "bases": [],
            "methods": [
              "__init__",
              "_initialize_targets",
              "_generate_optimization_actions",
              "_generate_predictive_actions",
              "get_optimization_stats"
            ],
            "is_async": false,
            "line": 393
          }
        ],
        "functions": [
          {
            "name": "get_performance_optimizer",
            "is_async": false,
            "args": [],
            "line": 814
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict",
              "deque"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "numpy"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Agent",
              "SystemMetric",
              "get_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "task_queue",
            "names": [
              "task_queue"
            ]
          },
          {
            "type": "import",
            "names": [
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "orchestrator",
            "names": [
              "orchestrator"
            ]
          }
        ],
        "size_lines": 821
      },
      {
        "file": "src/core/message_broker.py",
        "classes": [
          {
            "name": "MessageType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 18
          },
          {
            "name": "Message",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 30
          },
          {
            "name": "MessageHandler",
            "bases": [],
            "methods": [
              "__init__",
              "register_handler"
            ],
            "is_async": false,
            "line": 48
          },
          {
            "name": "MessageBroker",
            "bases": [],
            "methods": [
              "__init__",
              "_serialize_message",
              "_serialize_message_for_storage",
              "_deserialize_message"
            ],
            "is_async": false,
            "line": 114
          }
        ],
        "functions": [
          {
            "name": "get_message_broker",
            "is_async": false,
            "args": [],
            "line": 609
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "collections.abc",
            "names": [
              "Callable"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "redis.asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "get_settings"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "get_settings"
            ]
          }
        ],
        "size_lines": 627
      },
      {
        "file": "src/core/db_setup.py",
        "classes": [
          {
            "name": "DatabaseSetup",
            "bases": [],
            "methods": [
              "__init__",
              "run_migrations",
              "generate_migration"
            ],
            "is_async": false,
            "line": 19
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "text"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.ext.asyncio",
            "names": [
              "create_async_engine"
            ]
          },
          {
            "type": "import",
            "names": [
              "alembic.command"
            ]
          },
          {
            "type": "import",
            "names": [
              "alembic.config"
            ]
          },
          {
            "type": "from",
            "module": "async_db",
            "names": [
              "AsyncDatabaseManager"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          }
        ],
        "size_lines": 297
      },
      {
        "file": "src/core/task_coordinator.py",
        "classes": [
          {
            "name": "AssignmentStrategy",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "AgentCapability",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 31
          },
          {
            "name": "TaskAssignment",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 44
          },
          {
            "name": "AgentWorkload",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 56
          },
          {
            "name": "TaskCoordinator",
            "bases": [],
            "methods": [
              "__init__",
              "_add_agent_capability",
              "_get_agent_max_capacity",
              "_select_assignment_strategy",
              "_get_available_agents",
              "_find_best_agent_by_capability",
              "_find_best_agent_by_performance",
              "_find_best_agent_by_load",
              "_find_specialized_agent",
              "_find_agent_round_robin",
              "_calculate_assignment_confidence",
              "_estimate_completion_time",
              "_get_strategy_usage_stats"
            ],
            "is_async": false,
            "line": 67
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "Agent"
            ]
          },
          {
            "type": "from",
            "module": "models",
            "names": [
              "get_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "task_queue",
            "names": [
              "Task",
              "TaskPriority",
              "TaskStatus",
              "task_queue"
            ]
          }
        ],
        "size_lines": 745
      },
      {
        "file": "src/core/agent_coordination.py",
        "classes": [
          {
            "name": "CollaborationType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 18
          },
          {
            "name": "TaskPhase",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 29
          },
          {
            "name": "CollaborationContext",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 41
          },
          {
            "name": "AgentCapabilityMap",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 61
          },
          {
            "name": "TaskDecomposer",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 72
          },
          {
            "name": "CollaborationCoordinator",
            "bases": [],
            "methods": [
              "__init__",
              "_create_handler"
            ],
            "is_async": false,
            "line": 456
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "message_broker",
            "names": [
              "MessageBroker",
              "MessageType",
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "orchestrator",
            "names": [
              "orchestrator"
            ]
          }
        ],
        "size_lines": 894
      },
      {
        "file": "src/core/enhanced_message_broker.py",
        "classes": [
          {
            "name": "MessagePriority",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 22
          },
          {
            "name": "RoutingStrategy",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 31
          },
          {
            "name": "LoadBalancerConfig",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 42
          },
          {
            "name": "LoadBalancer",
            "bases": [],
            "methods": [
              "__init__",
              "select_agent",
              "_round_robin_select",
              "_least_load_select",
              "_weighted_select",
              "_hash_based_select",
              "_random_select"
            ],
            "is_async": false,
            "line": 51
          },
          {
            "name": "ContextShareType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 121
          },
          {
            "name": "SyncMode",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 132
          },
          {
            "name": "SharedContext",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 142
          },
          {
            "name": "ContextUpdate",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 159
          },
          {
            "name": "AgentState",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 173
          },
          {
            "name": "EnhancedMessageBroker",
            "bases": [
              "MessageBroker"
            ],
            "methods": [
              "__init__",
              "_deep_merge"
            ],
            "is_async": false,
            "line": 186
          }
        ],
        "functions": [
          {
            "name": "get_enhanced_message_broker",
            "is_async": false,
            "args": [
              "context_engine"
            ],
            "line": 1084
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any",
              "Dict",
              "List",
              "Optional",
              "Set"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "message_broker",
            "names": [
              "MessageBroker",
              "MessageType",
              "Message"
            ]
          },
          {
            "type": "from",
            "module": "context_engine",
            "names": [
              "ContextEngine"
            ]
          },
          {
            "type": "from",
            "module": "communication_monitor",
            "names": [
              "get_communication_monitor"
            ]
          },
          {
            "type": "from",
            "module": "enums",
            "names": [
              "TaskPriority"
            ]
          },
          {
            "type": "import",
            "names": [
              "random"
            ]
          },
          {
            "type": "from",
            "module": "communication_monitor",
            "names": [
              "CommunicationMetric",
              "MetricType"
            ]
          }
        ],
        "size_lines": 1093
      },
      {
        "file": "src/core/collaboration/enhanced_pair_programming.py",
        "classes": [
          {
            "name": "ContextShareType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 34
          },
          {
            "name": "CollaborationMode",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 47
          },
          {
            "name": "SharedContext",
            "bases": [],
            "methods": [
              "is_expired"
            ],
            "is_async": false,
            "line": 58
          },
          {
            "name": "CollaborationSession",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 78
          },
          {
            "name": "EnhancedAIPairProgramming",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 109
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "context_engine",
            "names": [
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "message_broker",
            "names": [
              "MessageType",
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "pair_programming",
            "names": [
              "CollaborationResult",
              "PairProgrammingSession",
              "SessionPhase"
            ]
          },
          {
            "type": "from",
            "module": "pair_programming",
            "names": [
              "PairProgrammingSession"
            ]
          }
        ],
        "size_lines": 688
      },
      {
        "file": "src/core/collaboration/pair_programming.py",
        "classes": [
          {
            "name": "SessionPhase",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 27
          },
          {
            "name": "SessionStatus",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 38
          },
          {
            "name": "CollaborationResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 49
          },
          {
            "name": "PhaseResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 62
          },
          {
            "name": "PairProgrammingSession",
            "bases": [],
            "methods": [
              "__init__",
              "get_session_metrics"
            ],
            "is_async": false,
            "line": 76
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent"
            ]
          },
          {
            "type": "from",
            "module": "task_queue",
            "names": [
              "Task"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "from",
            "module": "agents.base_agent",
            "names": [
              "BaseAgent"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task"
            ]
          }
        ],
        "size_lines": 521
      },
      {
        "file": "src/core/collaboration/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [
          {
            "type": "from",
            "module": "enhanced_pair_programming",
            "names": [
              "CollaborationMode",
              "CollaborationSession",
              "ContextShareType",
              "EnhancedAIPairProgramming",
              "SharedContext",
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "large_project_coordination",
            "names": [
              "LargeProjectCoordinator",
              "ProjectPhase",
              "ProjectScale",
              "ProjectWorkspace",
              "TaskDependencyGraph",
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "pair_programming",
            "names": [
              "CollaborationResult",
              "PairProgrammingSession",
              "SessionPhase",
              "SessionStatus"
            ]
          }
        ],
        "size_lines": 43
      },
      {
        "file": "src/core/collaboration/large_project_coordination.py",
        "classes": [
          {
            "name": "ProjectScale",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 23
          },
          {
            "name": "ProjectPhase",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 32
          },
          {
            "name": "ResourceType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 45
          },
          {
            "name": "ProjectWorkspace",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 56
          },
          {
            "name": "ResourcePool",
            "bases": [],
            "methods": [
              "allocate",
              "deallocate"
            ],
            "is_async": false,
            "line": 101
          },
          {
            "name": "TaskDependencyGraph",
            "bases": [],
            "methods": [
              "add_task",
              "get_ready_tasks",
              "get_critical_path"
            ],
            "is_async": false,
            "line": 137
          },
          {
            "name": "LargeProjectCoordinator",
            "bases": [],
            "methods": [
              "__init__",
              "_initialize_resource_pools"
            ],
            "is_async": false,
            "line": 204
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "agent_coordination",
            "names": [
              "CollaborationCoordinator"
            ]
          },
          {
            "type": "from",
            "module": "message_broker",
            "names": [
              "MessageType",
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "agent_coordination",
            "names": [
              "CollaborationCoordinator"
            ]
          }
        ],
        "size_lines": 781
      },
      {
        "file": "src/core/prediction/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [
          {
            "type": "from",
            "module": "failure_prediction",
            "names": [
              "FailureCategory",
              "FailurePattern",
              "FailurePredictionSystem",
              "FailureRiskLevel",
              "HistoricalFailure",
              "RiskAssessment"
            ]
          }
        ],
        "size_lines": 19
      },
      {
        "file": "src/core/prediction/failure_prediction.py",
        "classes": [
          {
            "name": "FailureRiskLevel",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "FailureCategory",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 29
          },
          {
            "name": "FailurePattern",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 40
          },
          {
            "name": "RiskAssessment",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 53
          },
          {
            "name": "HistoricalFailure",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 65
          },
          {
            "name": "PatternAnalyzer",
            "bases": [],
            "methods": [
              "__init__",
              "_detect_metric_anomalies",
              "_calculate_time_to_failure",
              "_has_failure_indicators",
              "_calculate_failure_probability",
              "_calculate_pattern_confidence",
              "_generate_mitigation_strategies"
            ],
            "is_async": false,
            "line": 77
          },
          {
            "name": "RiskMonitor",
            "bases": [],
            "methods": [
              "__init__",
              "_check_indicator_present",
              "_calculate_time_factor",
              "_calculate_assessment_confidence"
            ],
            "is_async": false,
            "line": 363
          },
          {
            "name": "FailurePredictionSystem",
            "bases": [],
            "methods": [
              "__init__",
              "_prioritize_actions",
              "_log_prediction_event",
              "_load_failure_history",
              "_save_failure_history",
              "get_prediction_statistics"
            ],
            "is_async": false,
            "line": 551
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "asdict",
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          }
        ],
        "size_lines": 830
      },
      {
        "file": "src/core/adw/cognitive_load_manager.py",
        "classes": [
          {
            "name": "SessionMode",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 18
          },
          {
            "name": "CognitiveLoadMetrics",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 33
          },
          {
            "name": "SessionFatigueIndicators",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 46
          },
          {
            "name": "ContextCompressionEngine",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 57
          },
          {
            "name": "TaskComplexityAdapter",
            "bases": [],
            "methods": [
              "__init__",
              "_calculate_performance_multiplier",
              "_calculate_task_complexity"
            ],
            "is_async": false,
            "line": 167
          },
          {
            "name": "CognitiveLoadManager",
            "bases": [],
            "methods": [
              "__init__",
              "_get_mode_constraints",
              "get_cognitive_load_statistics"
            ],
            "is_async": false,
            "line": 288
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          }
        ],
        "size_lines": 656
      },
      {
        "file": "src/core/adw/session_persistence.py",
        "classes": [
          {
            "name": "SessionCheckpoint",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 19
          },
          {
            "name": "SessionStatePersistence",
            "bases": [],
            "methods": [
              "__init__",
              "get_checkpoint_info"
            ],
            "is_async": false,
            "line": 33
          },
          {
            "name": "SessionStateManager",
            "bases": [],
            "methods": [
              "__init__",
              "get_persistence_manager"
            ],
            "is_async": false,
            "line": 337
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "asdict",
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "session_manager",
            "names": [
              "SessionPhase"
            ]
          }
        ],
        "size_lines": 436
      },
      {
        "file": "src/core/adw/session_manager.py",
        "classes": [
          {
            "name": "SessionPhase",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 31
          },
          {
            "name": "ADWSessionConfig",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 44
          },
          {
            "name": "SessionMetrics",
            "bases": [],
            "methods": [
              "duration"
            ],
            "is_async": false,
            "line": 76
          },
          {
            "name": "ADWSession",
            "bases": [],
            "methods": [
              "__init__",
              "_get_phase_duration",
              "_record_phase_duration",
              "_register_emergency_callbacks"
            ],
            "is_async": false,
            "line": 118
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "monitoring.autonomous_dashboard",
            "names": [
              "AutonomousDashboard"
            ]
          },
          {
            "type": "from",
            "module": "prediction.failure_prediction",
            "names": [
              "FailurePredictionSystem"
            ]
          },
          {
            "type": "from",
            "module": "safety",
            "names": [
              "AutonomousQualityGates",
              "AutoRollbackSystem",
              "ResourceGuardian"
            ]
          },
          {
            "type": "from",
            "module": "safety.emergency_intervention",
            "names": [
              "EmergencyInterventionSystem"
            ]
          },
          {
            "type": "from",
            "module": "cognitive_load_manager",
            "names": [
              "CognitiveLoadManager",
              "SessionMode"
            ]
          },
          {
            "type": "from",
            "module": "session_persistence",
            "names": [
              "SessionStatePersistence"
            ]
          },
          {
            "type": "from",
            "module": "safety.rollback_system",
            "names": [
              "RollbackLevel"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          }
        ],
        "size_lines": 1080
      },
      {
        "file": "src/core/adw/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [
          {
            "type": "from",
            "module": "integration_validation",
            "names": [
              "IntegrationValidationEngine",
              "IntegrationValidationReport",
              "ValidationResult"
            ]
          },
          {
            "type": "from",
            "module": "meta_learning",
            "names": [
              "LearningInsight",
              "MetaLearningEngine",
              "MetaLearningReport"
            ]
          },
          {
            "type": "from",
            "module": "micro_development",
            "names": [
              "MicroDevelopmentEngine",
              "MicroIterationResult"
            ]
          },
          {
            "type": "from",
            "module": "reconnaissance",
            "names": [
              "ReconnaissanceEngine",
              "ReconnaissanceReport"
            ]
          },
          {
            "type": "from",
            "module": "session_manager",
            "names": [
              "ADWSession",
              "ADWSessionConfig",
              "SessionPhase"
            ]
          },
          {
            "type": "from",
            "module": "session_persistence",
            "names": [
              "SessionCheckpoint",
              "SessionStateManager",
              "SessionStatePersistence"
            ]
          }
        ],
        "size_lines": 39
      },
      {
        "file": "src/core/adw/meta_learning.py",
        "classes": [
          {
            "name": "LearningInsight",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 19
          },
          {
            "name": "MetaLearningReport",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 31
          },
          {
            "name": "MetaLearningEngine",
            "bases": [],
            "methods": [
              "__init__",
              "_calculate_performance_improvements",
              "_generate_next_priorities",
              "_generate_system_adaptations"
            ],
            "is_async": false,
            "line": 43
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "safety.quality_gates",
            "names": [
              "CodeComplexityAnalyzer"
            ]
          }
        ],
        "size_lines": 789
      },
      {
        "file": "src/core/adw/integration_validation.py",
        "classes": [
          {
            "name": "ValidationResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 19
          },
          {
            "name": "IntegrationValidationReport",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 31
          },
          {
            "name": "IntegrationValidationEngine",
            "bases": [],
            "methods": [
              "__init__",
              "_parse_pytest_output",
              "_determine_rollback_reason",
              "get_validation_statistics"
            ],
            "is_async": false,
            "line": 41
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "safety.rollback_system",
            "names": [
              "RollbackLevel"
            ]
          },
          {
            "type": "from",
            "module": "safety.quality_gates",
            "names": [
              "SecurityScanner"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "pytest_xdist"
            ]
          },
          {
            "type": "import",
            "names": [
              "re"
            ]
          }
        ],
        "size_lines": 716
      },
      {
        "file": "src/core/adw/reconnaissance.py",
        "classes": [
          {
            "name": "ReconnaissanceReport",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 19
          },
          {
            "name": "ReconnaissanceEngine",
            "bases": [],
            "methods": [
              "__init__",
              "_categorize_error",
              "_generate_recommendations"
            ],
            "is_async": false,
            "line": 31
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "import",
            "names": [
              "shutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          }
        ],
        "size_lines": 566
      },
      {
        "file": "src/core/adw/micro_development.py",
        "classes": [
          {
            "name": "MicroIterationResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 18
          },
          {
            "name": "MicroDevelopmentEngine",
            "bases": [],
            "methods": [
              "__init__",
              "get_iteration_statistics"
            ],
            "is_async": false,
            "line": 32
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "import",
            "names": [
              "shutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "gc"
            ]
          }
        ],
        "size_lines": 476
      },
      {
        "file": "src/core/safety/quality_gates.py",
        "classes": [
          {
            "name": "QualityGateResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "QualityGateConfig",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 33
          },
          {
            "name": "CodeComplexityAnalyzer",
            "bases": [],
            "methods": [
              "__init__",
              "analyze_file",
              "analyze_project"
            ],
            "is_async": false,
            "line": 46
          },
          {
            "name": "ComplexityVisitor",
            "bases": [
              "<ast.Attribute object at 0x1018dd6d0>"
            ],
            "methods": [
              "__init__",
              "visit_FunctionDef",
              "visit_AsyncFunctionDef",
              "visit_ClassDef",
              "visit_If",
              "visit_For",
              "visit_AsyncFor",
              "visit_While",
              "visit_ExceptHandler"
            ],
            "is_async": false,
            "line": 147
          },
          {
            "name": "SecurityScanner",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 217
          },
          {
            "name": "PerformanceAnalyzer",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 301
          },
          {
            "name": "AutonomousQualityGates",
            "bases": [],
            "methods": [
              "__init__",
              "_record_gate_run",
              "get_gate_statistics"
            ],
            "is_async": false,
            "line": 351
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "ast"
            ]
          },
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "re"
            ]
          }
        ],
        "size_lines": 683
      },
      {
        "file": "src/core/safety/rollback_system.py",
        "classes": [
          {
            "name": "RollbackLevel",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 21
          },
          {
            "name": "RollbackStrategy",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 31
          },
          {
            "name": "GitCheckpoint",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 68
          },
          {
            "name": "PerformanceBaseline",
            "bases": [],
            "methods": [
              "__init__",
              "_load_baselines",
              "_save_baselines",
              "set_baseline",
              "check_regression"
            ],
            "is_async": false,
            "line": 164
          },
          {
            "name": "AutoRollbackSystem",
            "bases": [],
            "methods": [
              "__init__",
              "_record_rollback_attempt",
              "get_rollback_statistics"
            ],
            "is_async": false,
            "line": 233
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          }
        ],
        "size_lines": 462
      },
      {
        "file": "src/core/safety/resource_guardian.py",
        "classes": [
          {
            "name": "ResourceThresholds",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 22
          },
          {
            "name": "ResourceStatus",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 36
          },
          {
            "name": "MemoryOptimizer",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 49
          },
          {
            "name": "CPUThrottler",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 135
          },
          {
            "name": "DiskSpaceManager",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 215
          },
          {
            "name": "TestSuiteOptimizer",
            "bases": [],
            "methods": [
              "__init__",
              "set_baseline_runtime",
              "is_runtime_regression"
            ],
            "is_async": false,
            "line": 331
          },
          {
            "name": "ResourceGuardian",
            "bases": [],
            "methods": [
              "__init__",
              "get_resource_statistics"
            ],
            "is_async": false,
            "line": 422
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "os"
            ]
          },
          {
            "type": "import",
            "names": [
              "shutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "import",
            "names": [
              "gc"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "pytest_xdist"
            ]
          }
        ],
        "size_lines": 608
      },
      {
        "file": "src/core/safety/emergency_intervention.py",
        "classes": [
          {
            "name": "CriticalFailureType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 20
          },
          {
            "name": "InterventionLevel",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 32
          },
          {
            "name": "EmergencyTrigger",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 43
          },
          {
            "name": "EmergencyEvent",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 54
          },
          {
            "name": "EmergencyInterventionSystem",
            "bases": [],
            "methods": [
              "__init__",
              "_configure_default_triggers",
              "request_human_intervention",
              "resolve_emergency",
              "get_emergency_status",
              "register_callbacks"
            ],
            "is_async": false,
            "line": 67
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "collections.abc",
            "names": [
              "Callable"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          }
        ],
        "size_lines": 480
      },
      {
        "file": "src/core/safety/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [
          {
            "type": "from",
            "module": "quality_gates",
            "names": [
              "AutonomousQualityGates"
            ]
          },
          {
            "type": "from",
            "module": "resource_guardian",
            "names": [
              "ResourceGuardian"
            ]
          },
          {
            "type": "from",
            "module": "rollback_system",
            "names": [
              "AutoRollbackSystem",
              "RollbackLevel"
            ]
          }
        ],
        "size_lines": 19
      },
      {
        "file": "src/core/testing/ai_test_generator.py",
        "classes": [
          {
            "name": "TestType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 21
          },
          {
            "name": "EdgeCase",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 32
          },
          {
            "name": "GeneratedTest",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 41
          },
          {
            "name": "CodeAnalysis",
            "bases": [],
            "methods": [
              "__post_init__"
            ],
            "is_async": false,
            "line": 52
          },
          {
            "name": "TestGenerationResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 86
          },
          {
            "name": "CodeAnalyzer",
            "bases": [],
            "methods": [
              "_find_exceptions",
              "_calculate_complexity",
              "_generate_edge_cases",
              "_generate_class_edge_cases",
              "_identify_security_risks",
              "_identify_performance_issues"
            ],
            "is_async": false,
            "line": 95
          },
          {
            "name": "AITestGenerator",
            "bases": [],
            "methods": [
              "__init__",
              "_generate_unit_tests",
              "_generate_integration_tests",
              "_generate_performance_tests",
              "_generate_security_tests",
              "_generate_chaos_tests",
              "_edge_case_to_test_name",
              "_generate_unit_test_content",
              "_generate_happy_path_test",
              "_generate_integration_test_content",
              "_generate_method_integration_test",
              "_generate_performance_test_content",
              "_generate_security_test_content"
            ],
            "is_async": false,
            "line": 311
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "ast"
            ]
          },
          {
            "type": "import",
            "names": [
              "logging"
            ]
          },
          {
            "type": "import",
            "names": [
              "re"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          }
        ],
        "size_lines": 638
      },
      {
        "file": "src/core/testing/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [
          {
            "type": "from",
            "module": "ai_test_generator",
            "names": [
              "AITestGenerator",
              "CodeAnalysis",
              "EdgeCase",
              "GeneratedTest",
              "TestGenerationResult",
              "TestType"
            ]
          }
        ],
        "size_lines": 21
      },
      {
        "file": "src/core/testing/extended_session_tester.py",
        "classes": [
          {
            "name": "ExtendedSessionTestType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 25
          },
          {
            "name": "ExtendedSessionMetrics",
            "bases": [],
            "methods": [
              "duration",
              "success_rate"
            ],
            "is_async": false,
            "line": 36
          },
          {
            "name": "ExtendedSessionTester",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 83
          }
        ],
        "functions": [
          {
            "name": "analyze_test_results",
            "is_async": false,
            "args": [
              "report_file"
            ],
            "line": 696
          },
          {
            "name": "compare_test_results",
            "is_async": false,
            "args": [
              "report_files"
            ],
            "line": 735
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "adw.session_manager",
            "names": [
              "ADWSession",
              "ADWSessionConfig"
            ]
          },
          {
            "type": "from",
            "module": "monitoring.autonomous_dashboard",
            "names": [
              "AutonomousDashboard"
            ]
          }
        ],
        "size_lines": 777
      },
      {
        "file": "src/core/refactoring/autonomous_refactoring.py",
        "classes": [
          {
            "name": "RefactoringType",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 15
          },
          {
            "name": "CodeSmell",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 28
          },
          {
            "name": "RefactoringConfidence",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "is_async": false,
            "line": 41
          },
          {
            "name": "CodeSmellInstance",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 51
          },
          {
            "name": "RefactoringOpportunity",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 63
          },
          {
            "name": "RefactoringResult",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 76
          },
          {
            "name": "AutonomousRefactoringEngine",
            "bases": [],
            "methods": [
              "__init__",
              "calculate_confidence",
              "should_auto_apply",
              "get_refactoring_metrics",
              "_initialize_smell_detectors",
              "_initialize_refactoring_strategies",
              "_detect_long_methods",
              "_detect_long_parameter_lists",
              "_detect_complex_conditionals",
              "_detect_duplicate_code",
              "_detect_magic_numbers",
              "_smell_to_opportunity",
              "_identify_pattern_opportunities",
              "_calculate_cyclomatic_complexity",
              "_calculate_function_lengths",
              "_calculate_parameter_counts",
              "_calculate_nesting_depth",
              "_calculate_class_complexity",
              "_count_nesting_depth",
              "_estimate_effort"
            ],
            "is_async": false,
            "line": 89
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "ast"
            ]
          },
          {
            "type": "import",
            "names": [
              "re"
            ]
          },
          {
            "type": "from",
            "module": "collections",
            "names": [
              "defaultdict"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "enum",
            "names": [
              "Enum"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          }
        ],
        "size_lines": 822
      },
      {
        "file": "src/core/refactoring/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [
          {
            "type": "from",
            "module": "autonomous_refactoring",
            "names": [
              "AutonomousRefactoringEngine",
              "CodeSmell",
              "RefactoringConfidence",
              "RefactoringOpportunity",
              "RefactoringResult",
              "RefactoringType"
            ]
          }
        ],
        "size_lines": 19
      },
      {
        "file": "src/core/monitoring/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [
          {
            "type": "from",
            "module": "autonomous_dashboard",
            "names": [
              "AutonomousDashboard",
              "AutonomousMetrics",
              "AutonomyScore",
              "MetricsCollector",
              "VelocityMetrics"
            ]
          }
        ],
        "size_lines": 17
      },
      {
        "file": "src/core/monitoring/autonomous_dashboard.py",
        "classes": [
          {
            "name": "VelocityMetrics",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 21
          },
          {
            "name": "AutonomyScore",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 33
          },
          {
            "name": "AutonomousMetrics",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 45
          },
          {
            "name": "MetricsCollector",
            "bases": [],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 70
          },
          {
            "name": "AutonomyScoreCalculator",
            "bases": [],
            "methods": [
              "__init__",
              "calculate_autonomy_score",
              "_calculate_reliability_score",
              "_calculate_quality_score",
              "_calculate_velocity_score",
              "_calculate_efficiency_score",
              "_calculate_learning_score"
            ],
            "is_async": false,
            "line": 410
          },
          {
            "name": "AutonomousDashboard",
            "bases": [],
            "methods": [
              "__init__",
              "get_current_dashboard_data",
              "_load_metrics_history",
              "_save_metrics_history"
            ],
            "is_async": false,
            "line": 568
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "from",
            "module": "dataclasses",
            "names": [
              "asdict",
              "dataclass",
              "field"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "psutil"
            ]
          },
          {
            "type": "import",
            "names": [
              "shutil"
            ]
          }
        ],
        "size_lines": 790
      }
    ],
    "api_endpoints": [
      {
        "file": "src/api/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [],
        "size_lines": 0
      },
      {
        "file": "src/api/error_handlers.py",
        "classes": [
          {
            "name": "ErrorDetail",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 17
          },
          {
            "name": "APIErrorResponse",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 26
          },
          {
            "name": "APIError",
            "bases": [
              "HTTPException"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 38
          },
          {
            "name": "ValidationAPIError",
            "bases": [
              "APIError"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 59
          },
          {
            "name": "BusinessLogicError",
            "bases": [
              "APIError"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 83
          },
          {
            "name": "ResourceNotFoundError",
            "bases": [
              "APIError"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 94
          },
          {
            "name": "ConflictError",
            "bases": [
              "APIError"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 105
          },
          {
            "name": "InternalServerError",
            "bases": [
              "APIError"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 116
          },
          {
            "name": "RateLimitTracker",
            "bases": [],
            "methods": [
              "__init__",
              "is_rate_limited",
              "get_remaining_requests"
            ],
            "is_async": false,
            "line": 248
          }
        ],
        "functions": [
          {
            "name": "create_error_response",
            "is_async": false,
            "args": [
              "request",
              "status_code",
              "message",
              "details",
              "error_code"
            ],
            "line": 129
          },
          {
            "name": "validate_request_size",
            "is_async": false,
            "args": [
              "request",
              "max_size_mb"
            ],
            "line": 296
          },
          {
            "name": "validate_json_depth",
            "is_async": false,
            "args": [
              "data",
              "max_depth",
              "current_depth"
            ],
            "line": 309
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "traceback"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "fastapi",
            "names": [
              "HTTPException",
              "Request",
              "status"
            ]
          },
          {
            "type": "from",
            "module": "fastapi.exceptions",
            "names": [
              "RequestValidationError"
            ]
          },
          {
            "type": "from",
            "module": "fastapi.responses",
            "names": [
              "JSONResponse"
            ]
          },
          {
            "type": "from",
            "module": "pydantic",
            "names": [
              "BaseModel"
            ]
          }
        ],
        "size_lines": 323
      },
      {
        "file": "src/api/main.py",
        "classes": [
          {
            "name": "ConnectionManager",
            "bases": [],
            "methods": [
              "__init__",
              "disconnect",
              "subscribe_client",
              "unsubscribe_client"
            ],
            "is_async": false,
            "line": 65
          },
          {
            "name": "AgentInfo",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 322
          },
          {
            "name": "TaskCreate",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 335
          },
          {
            "name": "TaskInfo",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 345
          },
          {
            "name": "SystemStatus",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 360
          },
          {
            "name": "MessageSend",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 371
          },
          {
            "name": "APIResponse",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 378
          },
          {
            "name": "LoginRequest",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 386
          },
          {
            "name": "LoginResponse",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 391
          },
          {
            "name": "UserCreate",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 399
          },
          {
            "name": "UserInfo",
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "is_async": false,
            "line": 406
          }
        ],
        "functions": [
          {
            "name": "_generate_performance_recommendations",
            "is_async": false,
            "args": [
              "collector"
            ],
            "line": 1619
          },
          {
            "name": "start_server",
            "is_async": false,
            "args": [],
            "line": 2986
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "logging"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "from",
            "module": "fastapi",
            "names": [
              "BackgroundTasks",
              "Body",
              "Depends",
              "FastAPI",
              "HTTPException",
              "Request",
              "WebSocket",
              "WebSocketDisconnect"
            ]
          },
          {
            "type": "from",
            "module": "fastapi.exceptions",
            "names": [
              "RequestValidationError"
            ]
          },
          {
            "type": "from",
            "module": "fastapi.middleware.cors",
            "names": [
              "CORSMiddleware"
            ]
          },
          {
            "type": "from",
            "module": "pydantic",
            "names": [
              "BaseModel",
              "Field"
            ]
          },
          {
            "type": "from",
            "module": "error_handlers",
            "names": [
              "general_exception_handler",
              "http_exception_handler",
              "validation_exception_handler"
            ]
          },
          {
            "type": "from",
            "module": "middleware",
            "names": [
              "RequestTimeoutMiddleware",
              "RequestValidationMiddleware",
              "SecurityHeadersMiddleware"
            ]
          },
          {
            "type": "from",
            "module": "core.enums",
            "names": [
              "AgentStatus"
            ]
          },
          {
            "type": "from",
            "module": "core.analytics",
            "names": [
              "PerformanceMiddleware",
              "get_performance_collector",
              "start_performance_monitoring",
              "stop_performance_monitoring"
            ]
          },
          {
            "type": "from",
            "module": "core.auth",
            "names": [
              "AuthenticationError",
              "Permissions",
              "SecurityMiddleware",
              "get_cli_user",
              "get_current_user",
              "rate_limit",
              "require_admin"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.message_broker",
            "names": [
              "MessageType",
              "get_message_broker"
            ]
          },
          {
            "type": "from",
            "module": "core.orchestrator",
            "names": [
              "get_orchestrator"
            ]
          },
          {
            "type": "from",
            "module": "core.security",
            "names": [
              "User",
              "create_default_admin",
              "security_manager"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "Task",
              "TaskPriority",
              "task_queue"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "select"
            ]
          },
          {
            "type": "from",
            "module": "src.core.async_db",
            "names": [
              "get_async_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "src.core.models",
            "names": [
              "Agent"
            ]
          },
          {
            "type": "import",
            "names": [
              "uvicorn"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "get_settings"
            ]
          },
          {
            "type": "from",
            "module": "src.core.auth",
            "names": [
              "get_current_user"
            ]
          },
          {
            "type": "from",
            "module": "src.core.config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "src.core.message_broker",
            "names": [
              "MessageType",
              "get_message_broker"
            ]
          },
          {
            "type": "from",
            "module": "src.core.orchestrator",
            "names": [
              "get_orchestrator"
            ]
          },
          {
            "type": "from",
            "module": "src.core.security",
            "names": [
              "User",
              "create_default_admin",
              "security_manager"
            ]
          },
          {
            "type": "from",
            "module": "src.core.task_queue",
            "names": [
              "Task",
              "TaskPriority",
              "task_queue"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "fastapi.responses",
            "names": [
              "Response"
            ]
          },
          {
            "type": "from",
            "module": "core.performance_optimizer",
            "names": [
              "get_performance_optimizer"
            ]
          },
          {
            "type": "from",
            "module": "src.core.context_engine",
            "names": [
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "src.core.context_engine",
            "names": [
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "src.core.context_engine",
            "names": [
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "src.core.context_engine",
            "names": [
              "get_context_engine"
            ]
          },
          {
            "type": "from",
            "module": "core.self_modifier",
            "names": [
              "get_self_modifier"
            ]
          },
          {
            "type": "from",
            "module": "core.self_modifier",
            "names": [
              "CodeChange",
              "ModificationType",
              "get_self_modifier"
            ]
          },
          {
            "type": "from",
            "module": "core.self_modifier",
            "names": [
              "get_self_modifier"
            ]
          },
          {
            "type": "from",
            "module": "core.cli_git_integration",
            "names": [
              "get_enhanced_cli_executor"
            ]
          },
          {
            "type": "from",
            "module": "core.cli_git_integration",
            "names": [
              "WorkflowType",
              "get_enhanced_cli_executor"
            ]
          },
          {
            "type": "from",
            "module": "core.cli_git_integration",
            "names": [
              "get_enhanced_cli_executor"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "ProjectScale",
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration.enhanced_pair_programming",
            "names": [
              "CollaborationMode",
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration.enhanced_pair_programming",
            "names": [
              "ContextShareType",
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration.enhanced_pair_programming",
            "names": [
              "ContextShareType",
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration.enhanced_pair_programming",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration.enhanced_pair_programming",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration.enhanced_pair_programming",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration.enhanced_pair_programming",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration.enhanced_pair_programming",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "core.performance_optimizer",
            "names": [
              "get_performance_optimizer"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          }
        ],
        "size_lines": 2997
      },
      {
        "file": "src/api/middleware.py",
        "classes": [
          {
            "name": "RequestValidationMiddleware",
            "bases": [
              "BaseHTTPMiddleware"
            ],
            "methods": [
              "__init__",
              "_get_client_ip"
            ],
            "is_async": false,
            "line": 22
          },
          {
            "name": "SecurityHeadersMiddleware",
            "bases": [
              "BaseHTTPMiddleware"
            ],
            "methods": [],
            "is_async": false,
            "line": 190
          },
          {
            "name": "RequestTimeoutMiddleware",
            "bases": [
              "BaseHTTPMiddleware"
            ],
            "methods": [
              "__init__"
            ],
            "is_async": false,
            "line": 220
          }
        ],
        "functions": [],
        "imports": [
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "collections.abc",
            "names": [
              "Callable"
            ]
          },
          {
            "type": "import",
            "names": [
              "structlog"
            ]
          },
          {
            "type": "from",
            "module": "fastapi",
            "names": [
              "Request",
              "Response"
            ]
          },
          {
            "type": "from",
            "module": "starlette.middleware.base",
            "names": [
              "BaseHTTPMiddleware"
            ]
          },
          {
            "type": "from",
            "module": "error_handlers",
            "names": [
              "APIError",
              "rate_limiter",
              "validate_json_depth",
              "validate_request_size"
            ]
          },
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "from",
            "module": "starlette.requests",
            "names": [
              "Request"
            ]
          }
        ],
        "size_lines": 252
      }
    ],
    "cli_commands": [
      {
        "file": "src/cli/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [],
        "size_lines": 1
      },
      {
        "file": "src/cli/utils.py",
        "classes": [],
        "functions": [
          {
            "name": "error_handler",
            "is_async": false,
            "args": [
              "error"
            ],
            "line": 19
          },
          {
            "name": "success_message",
            "is_async": false,
            "args": [
              "message"
            ],
            "line": 25
          },
          {
            "name": "warning_message",
            "is_async": false,
            "args": [
              "message"
            ],
            "line": 30
          },
          {
            "name": "info_message",
            "is_async": false,
            "args": [
              "message"
            ],
            "line": 35
          },
          {
            "name": "create_status_table",
            "is_async": false,
            "args": [
              "title",
              "data"
            ],
            "line": 40
          },
          {
            "name": "create_system_status_table",
            "is_async": false,
            "args": [
              "services"
            ],
            "line": 66
          },
          {
            "name": "spinner_task",
            "is_async": false,
            "args": [
              "message"
            ],
            "line": 93
          },
          {
            "name": "print_panel",
            "is_async": false,
            "args": [
              "content",
              "title",
              "style"
            ],
            "line": 104
          },
          {
            "name": "confirm_action",
            "is_async": false,
            "args": [
              "message"
            ],
            "line": 109
          },
          {
            "name": "format_duration",
            "is_async": false,
            "args": [
              "seconds"
            ],
            "line": 115
          },
          {
            "name": "format_bytes",
            "is_async": false,
            "args": [
              "bytes_count"
            ],
            "line": 125
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "from",
            "module": "typing",
            "names": [
              "Any"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "rich.panel",
            "names": [
              "Panel"
            ]
          },
          {
            "type": "from",
            "module": "rich.status",
            "names": [
              "Status"
            ]
          },
          {
            "type": "from",
            "module": "rich.table",
            "names": [
              "Table"
            ]
          }
        ],
        "size_lines": 131
      },
      {
        "file": "src/cli/main.py",
        "classes": [],
        "functions": [
          {
            "name": "main",
            "is_async": false,
            "args": [
              "ctx",
              "version",
              "debug"
            ],
            "line": 54
          },
          {
            "name": "init",
            "is_async": false,
            "args": [],
            "line": 80
          },
          {
            "name": "cli_main",
            "is_async": false,
            "args": [],
            "line": 137
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "typer"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "commands",
            "names": [
              "agent",
              "collaborate",
              "context",
              "project",
              "system",
              "task"
            ]
          },
          {
            "type": "from",
            "module": "utils",
            "names": [
              "error_handler"
            ]
          },
          {
            "type": "from",
            "module": "coordination",
            "names": [
              "app"
            ]
          },
          {
            "type": "import",
            "names": [
              "logging"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "get_settings"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          }
        ],
        "size_lines": 148
      },
      {
        "file": "src/cli/coordination.py",
        "classes": [],
        "functions": [
          {
            "name": "start_collaboration",
            "is_async": false,
            "args": [
              "title",
              "description",
              "collaboration_type",
              "coordinator",
              "capabilities",
              "deadline_hours",
              "priority"
            ],
            "line": 22
          },
          {
            "name": "list_collaborations",
            "is_async": false,
            "args": [],
            "line": 88
          },
          {
            "name": "get_status",
            "is_async": false,
            "args": [
              "collaboration_id"
            ],
            "line": 138
          },
          {
            "name": "simulate_completion",
            "is_async": false,
            "args": [
              "collaboration_id",
              "agent_name"
            ],
            "line": 188
          },
          {
            "name": "demo",
            "is_async": false,
            "args": [],
            "line": 256
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime",
              "timedelta"
            ]
          },
          {
            "type": "import",
            "names": [
              "typer"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "rich.panel",
            "names": [
              "Panel"
            ]
          },
          {
            "type": "from",
            "module": "rich.table",
            "names": [
              "Table"
            ]
          },
          {
            "type": "from",
            "module": "core.agent_coordination",
            "names": [
              "CollaborationType",
              "coordination_system"
            ]
          },
          {
            "type": "from",
            "module": "core.message_broker",
            "names": [
              "message_broker"
            ]
          }
        ],
        "size_lines": 372
      },
      {
        "file": "src/cli/commands/task.py",
        "classes": [],
        "functions": [
          {
            "name": "list",
            "is_async": false,
            "args": [
              "status",
              "assigned_to"
            ],
            "line": 28
          },
          {
            "name": "submit",
            "is_async": false,
            "args": [
              "type",
              "title",
              "description",
              "file",
              "priority",
              "assigned_to"
            ],
            "line": 108
          },
          {
            "name": "logs",
            "is_async": false,
            "args": [
              "task_identifier",
              "follow"
            ],
            "line": 225
          },
          {
            "name": "cancel",
            "is_async": false,
            "args": [
              "task_identifier",
              "force"
            ],
            "line": 301
          },
          {
            "name": "self_improvement",
            "is_async": false,
            "args": [
              "title",
              "description"
            ],
            "line": 347
          },
          {
            "name": "search",
            "is_async": false,
            "args": [
              "query"
            ],
            "line": 404
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "import",
            "names": [
              "httpx"
            ]
          },
          {
            "type": "import",
            "names": [
              "typer"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "utils",
            "names": [
              "API_BASE_URL",
              "confirm_action",
              "create_status_table",
              "error_handler",
              "info_message",
              "success_message"
            ]
          }
        ],
        "size_lines": 536
      },
      {
        "file": "src/cli/commands/system.py",
        "classes": [
          {
            "name": "Intervals",
            "bases": [],
            "methods": [],
            "is_async": false,
            "line": 21
          }
        ],
        "functions": [
          {
            "name": "status",
            "is_async": false,
            "args": [],
            "line": 39
          },
          {
            "name": "start",
            "is_async": false,
            "args": [],
            "line": 143
          },
          {
            "name": "stop",
            "is_async": false,
            "args": [],
            "line": 203
          },
          {
            "name": "restart",
            "is_async": false,
            "args": [],
            "line": 218
          },
          {
            "name": "logs",
            "is_async": false,
            "args": [],
            "line": 303
          },
          {
            "name": "init_db",
            "is_async": false,
            "args": [],
            "line": 326
          },
          {
            "name": "start_api",
            "is_async": false,
            "args": [
              "host",
              "port",
              "reload"
            ],
            "line": 351
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "time"
            ]
          },
          {
            "type": "import",
            "names": [
              "httpx"
            ]
          },
          {
            "type": "import",
            "names": [
              "redis.asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "typer"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.ext.asyncio",
            "names": [
              "create_async_engine"
            ]
          },
          {
            "type": "from",
            "module": "utils",
            "names": [
              "create_system_status_table",
              "error_handler",
              "info_message",
              "success_message",
              "warning_message"
            ]
          },
          {
            "type": "from",
            "module": "core.constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "get_settings"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "get_settings"
            ]
          },
          {
            "type": "from",
            "module": "core.orchestrator",
            "names": [
              "orchestrator"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "settings"
            ]
          },
          {
            "type": "from",
            "module": "core.orchestrator",
            "names": [
              "orchestrator"
            ]
          },
          {
            "type": "from",
            "module": "core.config",
            "names": [
              "get_settings"
            ]
          },
          {
            "type": "from",
            "module": "core.models",
            "names": [
              "get_database_manager"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "text"
            ]
          },
          {
            "type": "from",
            "module": "core.message_broker",
            "names": [
              "message_broker"
            ]
          },
          {
            "type": "from",
            "module": "core.task_queue",
            "names": [
              "task_queue"
            ]
          }
        ],
        "size_lines": 382
      },
      {
        "file": "src/cli/commands/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [],
        "size_lines": 3
      },
      {
        "file": "src/cli/commands/context.py",
        "classes": [],
        "functions": [
          {
            "name": "search",
            "is_async": false,
            "args": [
              "query",
              "limit"
            ],
            "line": 23
          },
          {
            "name": "add",
            "is_async": false,
            "args": [
              "file",
              "agent_id"
            ],
            "line": 81
          },
          {
            "name": "stats",
            "is_async": false,
            "args": [
              "agent_id"
            ],
            "line": 141
          },
          {
            "name": "consolidate",
            "is_async": false,
            "args": [
              "agent_id"
            ],
            "line": 209
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "import",
            "names": [
              "httpx"
            ]
          },
          {
            "type": "import",
            "names": [
              "typer"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "utils",
            "names": [
              "error_handler",
              "info_message",
              "success_message"
            ]
          }
        ],
        "size_lines": 256
      },
      {
        "file": "src/cli/commands/collaborate.py",
        "classes": [],
        "functions": [
          {
            "name": "start_session",
            "is_async": false,
            "args": [
              "participants",
              "mode",
              "task",
              "project_context_file"
            ],
            "line": 23
          },
          {
            "name": "share_context",
            "is_async": false,
            "args": [
              "session_id",
              "source_agent",
              "context_type",
              "content_file",
              "tags"
            ],
            "line": 85
          },
          {
            "name": "get_context",
            "is_async": false,
            "args": [
              "session_id",
              "agent_id",
              "query",
              "context_types",
              "output_file"
            ],
            "line": 150
          },
          {
            "name": "suggest_patterns",
            "is_async": false,
            "args": [
              "session_id",
              "code_file",
              "context"
            ],
            "line": 250
          },
          {
            "name": "switch_driver",
            "is_async": false,
            "args": [
              "session_id",
              "new_driver"
            ],
            "line": 306
          },
          {
            "name": "metrics",
            "is_async": false,
            "args": [
              "session_id",
              "watch"
            ],
            "line": 334
          },
          {
            "name": "live_session",
            "is_async": false,
            "args": [
              "session_id",
              "agent_id"
            ],
            "line": 400
          },
          {
            "name": "end_session",
            "is_async": false,
            "args": [
              "session_id"
            ],
            "line": 481
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "datetime"
            ]
          },
          {
            "type": "import",
            "names": [
              "typer"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "rich.layout",
            "names": [
              "Layout"
            ]
          },
          {
            "type": "from",
            "module": "rich.live",
            "names": [
              "Live"
            ]
          },
          {
            "type": "from",
            "module": "rich.panel",
            "names": [
              "Panel"
            ]
          },
          {
            "type": "from",
            "module": "rich.table",
            "names": [
              "Table"
            ]
          },
          {
            "type": "from",
            "module": "utils",
            "names": [
              "error_handler",
              "info_message",
              "success_message",
              "warning_message"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "CollaborationMode",
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "ContextShareType",
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "ContextShareType",
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_enhanced_pair_programming"
            ]
          },
          {
            "type": "from",
            "module": "core.constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_enhanced_pair_programming"
            ]
          }
        ],
        "size_lines": 522
      },
      {
        "file": "src/cli/commands/agent.py",
        "classes": [],
        "functions": [
          {
            "name": "list",
            "is_async": false,
            "args": [],
            "line": 29
          },
          {
            "name": "describe",
            "is_async": false,
            "args": [
              "agent_identifier"
            ],
            "line": 83
          },
          {
            "name": "spawn",
            "is_async": false,
            "args": [
              "agent_type",
              "name"
            ],
            "line": 149
          },
          {
            "name": "stop",
            "is_async": false,
            "args": [
              "agent_identifier"
            ],
            "line": 199
          },
          {
            "name": "health",
            "is_async": false,
            "args": [
              "agent_identifier"
            ],
            "line": 240
          },
          {
            "name": "search",
            "is_async": false,
            "args": [
              "query"
            ],
            "line": 280
          },
          {
            "name": "run_agent",
            "is_async": false,
            "args": [
              "agent_type",
              "name",
              "log_level"
            ],
            "line": 350
          },
          {
            "name": "list_sessions",
            "is_async": false,
            "args": [],
            "line": 383
          },
          {
            "name": "bootstrap",
            "is_async": false,
            "args": [],
            "line": 418
          },
          {
            "name": "tools",
            "is_async": false,
            "args": [],
            "line": 463
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "import",
            "names": [
              "sys"
            ]
          },
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "pathlib",
            "names": [
              "Path"
            ]
          },
          {
            "type": "import",
            "names": [
              "httpx"
            ]
          },
          {
            "type": "import",
            "names": [
              "typer"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "rich.table",
            "names": [
              "Table"
            ]
          },
          {
            "type": "from",
            "module": "utils",
            "names": [
              "API_BASE_URL",
              "create_status_table",
              "error_handler",
              "info_message",
              "success_message"
            ]
          },
          {
            "type": "from",
            "module": "agents.runner",
            "names": [
              "AgentRunner"
            ]
          },
          {
            "type": "import",
            "names": [
              "subprocess"
            ]
          },
          {
            "type": "from",
            "module": "bootstrap",
            "names": [
              "BootstrapAgent"
            ]
          }
        ],
        "size_lines": 510
      },
      {
        "file": "src/cli/commands/project.py",
        "classes": [],
        "functions": [
          {
            "name": "create",
            "is_async": false,
            "args": [
              "name",
              "description",
              "scale",
              "lead_agent",
              "root_path"
            ],
            "line": 20
          },
          {
            "name": "join",
            "is_async": false,
            "args": [
              "project_id",
              "agent_id",
              "roles"
            ],
            "line": 72
          },
          {
            "name": "decompose",
            "is_async": false,
            "args": [
              "project_id",
              "description",
              "complexity",
              "target_agents"
            ],
            "line": 102
          },
          {
            "name": "status",
            "is_async": false,
            "args": [
              "project_id",
              "detailed"
            ],
            "line": 164
          },
          {
            "name": "progress",
            "is_async": false,
            "args": [
              "project_id",
              "watch"
            ],
            "line": 253
          },
          {
            "name": "resolve_conflict",
            "is_async": false,
            "args": [
              "project_id",
              "conflict_type",
              "agents",
              "context_file"
            ],
            "line": 309
          },
          {
            "name": "list_projects",
            "is_async": false,
            "args": [],
            "line": 361
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "asyncio"
            ]
          },
          {
            "type": "import",
            "names": [
              "json"
            ]
          },
          {
            "type": "import",
            "names": [
              "typer"
            ]
          },
          {
            "type": "from",
            "module": "rich.console",
            "names": [
              "Console"
            ]
          },
          {
            "type": "from",
            "module": "rich.table",
            "names": [
              "Table"
            ]
          },
          {
            "type": "from",
            "module": "rich.tree",
            "names": [
              "Tree"
            ]
          },
          {
            "type": "from",
            "module": "utils",
            "names": [
              "error_handler",
              "info_message",
              "success_message",
              "warning_message"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "ProjectScale",
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.constants",
            "names": [
              "Intervals"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          },
          {
            "type": "from",
            "module": "core.collaboration",
            "names": [
              "get_large_project_coordinator"
            ]
          }
        ],
        "size_lines": 401
      }
    ],
    "models": [
      {
        "file": "src/core/models.py",
        "classes": [
          {
            "name": "Agent",
            "bases": [
              "Base"
            ],
            "methods": [
              "__repr__",
              "to_dict"
            ],
            "is_async": false,
            "line": 55
          },
          {
            "name": "Task",
            "bases": [
              "Base"
            ],
            "methods": [
              "__repr__",
              "to_dict"
            ],
            "is_async": false,
            "line": 127
          },
          {
            "name": "Session",
            "bases": [
              "Base"
            ],
            "methods": [
              "__repr__"
            ],
            "is_async": false,
            "line": 196
          },
          {
            "name": "Context",
            "bases": [
              "Base"
            ],
            "methods": [
              "__repr__"
            ],
            "is_async": false,
            "line": 235
          },
          {
            "name": "Conversation",
            "bases": [
              "Base"
            ],
            "methods": [
              "__repr__"
            ],
            "is_async": false,
            "line": 291
          },
          {
            "name": "SystemCheckpoint",
            "bases": [
              "Base"
            ],
            "methods": [
              "__repr__"
            ],
            "is_async": false,
            "line": 349
          },
          {
            "name": "SystemMetric",
            "bases": [
              "Base"
            ],
            "methods": [
              "__repr__"
            ],
            "is_async": false,
            "line": 403
          },
          {
            "name": "CodeArtifact",
            "bases": [
              "Base"
            ],
            "methods": [
              "__repr__"
            ],
            "is_async": false,
            "line": 440
          },
          {
            "name": "DatabaseManager",
            "bases": [],
            "methods": [
              "__init__",
              "create_tables",
              "drop_tables",
              "get_session",
              "init_database"
            ],
            "is_async": false,
            "line": 502
          },
          {
            "name": "Vector",
            "bases": [],
            "methods": [
              "__init__",
              "__call__"
            ],
            "is_async": false,
            "line": 27
          }
        ],
        "functions": [
          {
            "name": "utc_now",
            "is_async": false,
            "args": [],
            "line": 47
          },
          {
            "name": "generate_agent_short_id",
            "is_async": false,
            "args": [
              "mapper",
              "connection",
              "target"
            ],
            "line": 557
          },
          {
            "name": "generate_task_short_id",
            "is_async": false,
            "args": [
              "mapper",
              "connection",
              "target"
            ],
            "line": 566
          },
          {
            "name": "generate_session_short_id",
            "is_async": false,
            "args": [
              "mapper",
              "connection",
              "target"
            ],
            "line": 575
          },
          {
            "name": "receive_before_update",
            "is_async": false,
            "args": [
              "mapper",
              "connection",
              "target"
            ],
            "line": 584
          },
          {
            "name": "receive_before_update_context",
            "is_async": false,
            "args": [
              "mapper",
              "connection",
              "target"
            ],
            "line": 590
          },
          {
            "name": "get_database_manager",
            "is_async": false,
            "args": [
              "database_url"
            ],
            "line": 601
          }
        ],
        "imports": [
          {
            "type": "import",
            "names": [
              "uuid"
            ]
          },
          {
            "type": "from",
            "module": "datetime",
            "names": [
              "UTC",
              "datetime"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy",
            "names": [
              "Column",
              "DateTime",
              "Float",
              "ForeignKey",
              "Integer",
              "String",
              "Text",
              "create_engine",
              "event"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.dialects.postgresql",
            "names": [
              "JSONB",
              "UUID"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.ext.declarative",
            "names": [
              "declarative_base"
            ]
          },
          {
            "type": "from",
            "module": "sqlalchemy.orm",
            "names": [
              "relationship",
              "sessionmaker"
            ]
          },
          {
            "type": "from",
            "module": "pgvector.sqlalchemy",
            "names": [
              "Vector"
            ]
          },
          {
            "type": "from",
            "module": "short_id",
            "names": [
              "generate_short_id"
            ]
          }
        ],
        "size_lines": 606
      }
    ],
    "utilities": [
      {
        "file": "src/__init__.py",
        "classes": [],
        "functions": [],
        "imports": [],
        "size_lines": 0
      }
    ]
  },
  "dependencies": {
    "internal": {
      "src/__init__.py": [],
      "src/core/enhanced_performance_optimizer.py": [],
      "src/core/auth.py": [],
      "src/core/communication_monitor.py": [],
      "src/core/enums.py": [],
      "src/core/task_queue.py": [],
      "src/core/config.py": [],
      "src/core/cli_git_integration.py": [],
      "src/core/realtime_collaboration.py": [],
      "src/core/models.py": [],
      "src/core/security.py": [],
      "src/core/constants.py": [],
      "src/core/load_balancer.py": [],
      "src/core/persistent_cli.py": [],
      "src/core/__init__.py": [],
      "src/core/sleep_wake_manager.py": [],
      "src/core/self_bootstrap.py": [],
      "src/core/shared_knowledge_base.py": [],
      "src/core/short_id_resolver.py": [],
      "src/core/caching.py": [],
      "src/core/orchestrator.py": [],
      "src/core/real_time_monitoring.py": [],
      "src/core/advanced_context_engine.py": [],
      "src/core/tmux_manager.py": [],
      "src/core/context_engine.py": [],
      "src/core/async_db.py": [],
      "src/core/enhanced_routing.py": [],
      "src/core/communication_performance_dashboard.py": [],
      "src/core/self_modifier.py": [],
      "src/core/analytics.py": [],
      "src/core/short_id.py": [],
      "src/core/performance_optimizer.py": [],
      "src/core/message_broker.py": [],
      "src/core/db_setup.py": [],
      "src/core/task_coordinator.py": [],
      "src/core/agent_coordination.py": [],
      "src/core/enhanced_message_broker.py": [],
      "src/agents/runner.py": [],
      "src/agents/meta_agent.py": [],
      "src/agents/agent_factory.py": [],
      "src/agents/base_agent.py": [],
      "src/agents/qa_agent.py": [],
      "src/agents/architect_agent.py": [],
      "src/agents/__init__.py": [],
      "src/agents/devops_agent.py": [],
      "src/agents/developer_agent.py": [],
      "src/cli/__init__.py": [],
      "src/cli/utils.py": [],
      "src/cli/main.py": [],
      "src/cli/coordination.py": [],
      "src/api/__init__.py": [],
      "src/api/error_handlers.py": [],
      "src/api/main.py": [
        "src.core.async_db",
        "src.core.models",
        "src.core.auth",
        "src.core.config",
        "src.core.message_broker",
        "src.core.orchestrator",
        "src.core.security",
        "src.core.task_queue",
        "src.core.context_engine",
        "src.core.context_engine",
        "src.core.context_engine",
        "src.core.context_engine"
      ],
      "src/api/middleware.py": [],
      "src/core/collaboration/enhanced_pair_programming.py": [],
      "src/core/collaboration/pair_programming.py": [],
      "src/core/collaboration/__init__.py": [],
      "src/core/collaboration/large_project_coordination.py": [],
      "src/core/prediction/__init__.py": [],
      "src/core/prediction/failure_prediction.py": [],
      "src/core/adw/cognitive_load_manager.py": [],
      "src/core/adw/session_persistence.py": [],
      "src/core/adw/session_manager.py": [],
      "src/core/adw/__init__.py": [],
      "src/core/adw/meta_learning.py": [],
      "src/core/adw/integration_validation.py": [],
      "src/core/adw/reconnaissance.py": [],
      "src/core/adw/micro_development.py": [],
      "src/core/safety/quality_gates.py": [],
      "src/core/safety/rollback_system.py": [],
      "src/core/safety/resource_guardian.py": [],
      "src/core/safety/emergency_intervention.py": [],
      "src/core/safety/__init__.py": [],
      "src/core/testing/ai_test_generator.py": [],
      "src/core/testing/__init__.py": [],
      "src/core/testing/extended_session_tester.py": [],
      "src/core/refactoring/autonomous_refactoring.py": [],
      "src/core/refactoring/__init__.py": [],
      "src/core/monitoring/__init__.py": [],
      "src/core/monitoring/autonomous_dashboard.py": [],
      "src/cli/commands/task.py": [],
      "src/cli/commands/system.py": [],
      "src/cli/commands/__init__.py": [],
      "src/cli/commands/context.py": [],
      "src/cli/commands/collaborate.py": [],
      "src/cli/commands/agent.py": [],
      "src/cli/commands/project.py": []
    },
    "external": [
      "qa_agent",
      "task_queue",
      "config",
      "aiohttp",
      "pair_programming",
      "session_persistence",
      "enhanced_message_broker",
      "micro_development",
      "integration_validation",
      "async_db",
      "utils",
      "ai_test_generator",
      "datetime",
      "short_id",
      "resource_guardian",
      "enums",
      "analytics",
      "passlib",
      "orchestrator",
      "sentence_transformers",
      "architect_agent",
      "pydantic_settings",
      "autonomous_dashboard",
      "caching",
      "tmux_manager",
      "enhanced_pair_programming",
      "reconnaissance",
      "safety",
      "core",
      "session_manager",
      "security",
      "error_handlers",
      "fastapi",
      "base_agent",
      "coordination",
      "quality_gates",
      "context_engine",
      "large_project_coordination",
      "typing",
      "agent_coordination",
      "pathlib",
      "prediction",
      "sqlalchemy",
      "autonomous_refactoring",
      "message_broker",
      "bootstrap",
      "adw",
      "devops_agent",
      "communication_monitor",
      "dataclasses",
      "cognitive_load_manager",
      "constants",
      "pgvector",
      "failure_prediction",
      "meta_learning",
      "collections",
      "commands",
      "advanced_context_engine",
      "pydantic",
      "middleware",
      "abc",
      "agents",
      "monitoring",
      "shared_knowledge_base",
      "rich",
      "models",
      "starlette",
      "rollback_system",
      "meta_agent",
      "enum",
      "realtime_collaboration"
    ],
    "cycles": [],
    "analysis": {
      "most_dependent": [
        [
          "src/api/main.py",
          12
        ],
        [
          "src/__init__.py",
          0
        ],
        [
          "src/core/enhanced_performance_optimizer.py",
          0
        ],
        [
          "src/core/auth.py",
          0
        ],
        [
          "src/core/communication_monitor.py",
          0
        ],
        [
          "src/core/enums.py",
          0
        ],
        [
          "src/core/task_queue.py",
          0
        ],
        [
          "src/core/config.py",
          0
        ],
        [
          "src/core/cli_git_integration.py",
          0
        ],
        [
          "src/core/realtime_collaboration.py",
          0
        ]
      ],
      "least_dependent": [
        [
          "src/__init__.py",
          0
        ],
        [
          "src/core/enhanced_performance_optimizer.py",
          0
        ],
        [
          "src/core/auth.py",
          0
        ],
        [
          "src/core/communication_monitor.py",
          0
        ],
        [
          "src/core/enums.py",
          0
        ],
        [
          "src/core/task_queue.py",
          0
        ],
        [
          "src/core/config.py",
          0
        ],
        [
          "src/core/cli_git_integration.py",
          0
        ],
        [
          "src/core/realtime_collaboration.py",
          0
        ],
        [
          "src/core/models.py",
          0
        ]
      ]
    }
  },
  "contracts": {
    "agent_contracts": {
      "BaseAgent": {
        "methods": [
          {
            "name": "__init__",
            "is_abstract": false,
            "is_async": false,
            "args": [
              "self",
              "name",
              "agent_type",
              "role",
              "enhanced_communication"
            ]
          },
          {
            "name": "_setup_message_handlers",
            "is_abstract": false,
            "is_async": false,
            "args": [
              "self"
            ]
          },
          {
            "name": "_get_capabilities",
            "is_abstract": false,
            "is_async": false,
            "args": [
              "self"
            ]
          },
          {
            "name": "capabilities",
            "is_abstract": false,
            "is_async": false,
            "args": [
              "self"
            ]
          }
        ],
        "abstract_methods": []
      }
    },
    "api_contracts": {
      "endpoints": [
        {
          "method": "POST",
          "path": "unknown",
          "function": null
        },
        {
          "method": "POST",
          "path": "/api/v1/auth/refresh",
          "function": "refresh_token"
        },
        {
          "method": "GET",
          "path": "/api/v1/auth/me",
          "function": "get_current_user_info"
        },
        {
          "method": "POST",
          "path": "/api/v1/auth/logout",
          "function": "logout"
        },
        {
          "method": "POST",
          "path": "/api/v1/auth/users",
          "function": "create_user"
        },
        {
          "method": "GET",
          "path": "unknown",
          "function": null
        },
        {
          "method": "GET",
          "path": "unknown",
          "function": null
        },
        {
          "method": "GET",
          "path": "/api/v1/status",
          "function": "get_system_status"
        },
        {
          "method": "GET",
          "path": "/api/v1/agents",
          "function": "list_agents"
        },
        {
          "method": "GET",
          "path": "/api/v1/agents/{agent_name}",
          "function": "get_agent"
        },
        {
          "method": "POST",
          "path": "/api/v1/agents",
          "function": "spawn_agent"
        },
        {
          "method": "POST",
          "path": "/api/v1/agents/{agent_name}/stop",
          "function": "stop_agent"
        },
        {
          "method": "POST",
          "path": "/api/v1/agents/{agent_name}/health",
          "function": "check_agent_health"
        },
        {
          "method": "GET",
          "path": "/api/v1/test",
          "function": "test_endpoint"
        },
        {
          "method": "GET",
          "path": "/api/v1/tasks",
          "function": "list_tasks"
        },
        {
          "method": "POST",
          "path": "/api/v1/tasks",
          "function": "create_task"
        },
        {
          "method": "POST",
          "path": "/api/v1/tasks/self-improvement",
          "function": "create_self_improvement_task"
        },
        {
          "method": "GET",
          "path": "/api/v1/tasks/{task_id}",
          "function": "get_task"
        },
        {
          "method": "POST",
          "path": "/api/v1/tasks/{task_id}/cancel",
          "function": "cancel_task"
        },
        {
          "method": "POST",
          "path": "/api/v1/messages",
          "function": "send_message"
        },
        {
          "method": "POST",
          "path": "/api/v1/broadcast",
          "function": "broadcast_message"
        },
        {
          "method": "POST",
          "path": "/api/v1/system/analyze",
          "function": "trigger_system_analysis"
        },
        {
          "method": "POST",
          "path": "/api/v1/system/shutdown",
          "function": "shutdown_system"
        },
        {
          "method": "GET",
          "path": "unknown",
          "function": null
        },
        {
          "method": "GET",
          "path": "unknown",
          "function": null
        },
        {
          "method": "GET",
          "path": "unknown",
          "function": null
        },
        {
          "method": "GET",
          "path": "unknown",
          "function": null
        },
        {
          "method": "POST",
          "path": "/api/v1/performance/optimize",
          "function": "trigger_optimization"
        },
        {
          "method": "GET",
          "path": "/api/v1/context/{agent_id}",
          "function": "get_agent_context"
        },
        {
          "method": "POST",
          "path": "/api/v1/context/{agent_id}/search",
          "function": "search_context"
        },
        {
          "method": "POST",
          "path": "/api/v1/context/{agent_id}/add",
          "function": "add_context"
        },
        {
          "method": "POST",
          "path": "/api/v1/context/{agent_id}/consolidate",
          "function": "consolidate_agent_memory"
        },
        {
          "method": "GET",
          "path": "/api/v1/modifications",
          "function": "get_modification_stats"
        },
        {
          "method": "POST",
          "path": "/api/v1/modifications/proposal",
          "function": "create_modification_proposal"
        },
        {
          "method": "POST",
          "path": "/api/v1/modifications/{proposal_id}/validate",
          "function": "validate_modification"
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows",
          "function": "list_workflows"
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows",
          "function": "create_workflow"
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/{workflow_id}/complete",
          "function": "complete_workflow"
        },
        {
          "method": "GET",
          "path": "/api/v1/adw/metrics/current",
          "function": "get_current_adw_metrics"
        },
        {
          "method": "GET",
          "path": "/api/v1/adw/cognitive/state",
          "function": "get_cognitive_state"
        },
        {
          "method": "GET",
          "path": "/api/v1/adw/predictions/current",
          "function": "get_failure_predictions"
        },
        {
          "method": "POST",
          "path": "/api/v1/adw/monitoring/start",
          "function": "start_adw_monitoring"
        },
        {
          "method": "POST",
          "path": "/api/v1/adw/monitoring/stop",
          "function": "stop_adw_monitoring"
        },
        {
          "method": "GET",
          "path": "/api/v1/adw/sessions/history",
          "function": "get_adw_session_history"
        },
        {
          "method": "GET",
          "path": "/api/v1/adw/emergency/status",
          "function": "get_emergency_status"
        },
        {
          "method": "POST",
          "path": "/api/v1/adw/emergency/resolve/{event_index}",
          "function": "resolve_emergency_event"
        },
        {
          "method": "POST",
          "path": "/api/v1/adw/emergency/request-intervention",
          "function": "request_human_intervention"
        },
        {
          "method": "POST",
          "path": "/api/v1/projects",
          "function": "create_project_workspace"
        },
        {
          "method": "POST",
          "path": "/api/v1/projects/{project_id}/join",
          "function": "join_project"
        },
        {
          "method": "POST",
          "path": "/api/v1/projects/{project_id}/tasks/decompose",
          "function": "decompose_large_task"
        },
        {
          "method": "GET",
          "path": "/api/v1/projects/{project_id}/status",
          "function": "get_project_status"
        },
        {
          "method": "GET",
          "path": "/api/v1/projects/{project_id}/progress",
          "function": "monitor_project_progress"
        },
        {
          "method": "POST",
          "path": "/api/v1/projects/{project_id}/conflicts/resolve",
          "function": "resolve_project_conflict"
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/enhanced-session",
          "function": "start_enhanced_collaboration"
        },
        {
          "method": "POST",
          "path": "unknown",
          "function": "share_collaboration_context"
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/{session_id}/context",
          "function": "get_relevant_context"
        },
        {
          "method": "POST",
          "path": "unknown",
          "function": "suggest_code_patterns"
        },
        {
          "method": "POST",
          "path": "unknown",
          "function": "switch_collaboration_driver"
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/{session_id}/track-live",
          "function": "track_live_collaboration"
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/{session_id}/metrics",
          "function": "get_collaboration_metrics"
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/{session_id}/end",
          "function": "end_collaboration_session"
        },
        {
          "method": "GET",
          "path": "/api/v1/diagnostics",
          "function": "get_system_diagnostics"
        }
      ]
    },
    "message_contracts": {
      "core/message_broker.py": {
        "analyzed": true
      },
      "core/enhanced_message_broker.py": {
        "analyzed": true
      },
      "core/models.py": {
        "analyzed": true
      }
    },
    "database_contracts": {
      "models": [
        "Agent",
        "Task",
        "Session",
        "Context",
        "Conversation",
        "SystemCheckpoint",
        "SystemMetric",
        "CodeArtifact"
      ]
    }
  },
  "cli_interface": {
    "task.py": [
      {
        "name": "list",
        "description": ""
      },
      {
        "name": "submit",
        "description": ""
      },
      {
        "name": "logs",
        "description": ""
      },
      {
        "name": "cancel",
        "description": ""
      },
      {
        "name": "search",
        "description": ""
      }
    ],
    "system.py": [
      {
        "name": "status",
        "description": "Check system status and health"
      },
      {
        "name": "start",
        "description": "Start the hive system (API server and core services)"
      },
      {
        "name": "stop",
        "description": "Stop the hive system gracefully"
      },
      {
        "name": "restart",
        "description": "Restart the hive system"
      },
      {
        "name": "logs",
        "description": "Show system logs"
      }
    ],
    "context.py": [
      {
        "name": "search",
        "description": ""
      },
      {
        "name": "add",
        "description": ""
      },
      {
        "name": "stats",
        "description": ""
      },
      {
        "name": "consolidate",
        "description": ""
      }
    ],
    "collaborate.py": [
      {
        "name": "start_session",
        "description": ""
      },
      {
        "name": "share_context",
        "description": ""
      },
      {
        "name": "get_context",
        "description": ""
      },
      {
        "name": "suggest_patterns",
        "description": ""
      },
      {
        "name": "switch_driver",
        "description": ""
      },
      {
        "name": "metrics",
        "description": ""
      },
      {
        "name": "live_session",
        "description": ""
      },
      {
        "name": "end_session",
        "description": "End an enhanced collaboration session."
      }
    ],
    "agent.py": [
      {
        "name": "list",
        "description": "List all registered agents"
      },
      {
        "name": "describe",
        "description": ""
      },
      {
        "name": "spawn",
        "description": ""
      },
      {
        "name": "stop",
        "description": ""
      },
      {
        "name": "health",
        "description": ""
      },
      {
        "name": "search",
        "description": ""
      },
      {
        "name": "bootstrap",
        "description": "Bootstrap the LeanVibe Agent Hive system"
      },
      {
        "name": "tools",
        "description": "Check available CLI agentic coding tools"
      }
    ],
    "project.py": [
      {
        "name": "create",
        "description": ""
      },
      {
        "name": "join",
        "description": ""
      },
      {
        "name": "decompose",
        "description": ""
      },
      {
        "name": "status",
        "description": ""
      },
      {
        "name": "progress",
        "description": ""
      },
      {
        "name": "resolve_conflict",
        "description": ""
      },
      {
        "name": "list_projects",
        "description": "List all active large projects."
      }
    ]
  },
  "test_coverage": {
    "unit_tests": [
      "tests/test_infrastructure.py",
      "tests/unit/test_large_project_coordination.py",
      "tests/unit/test_message_broker.py",
      "tests/unit/test_developer_agent.py",
      "tests/unit/test_failure_prediction.py",
      "tests/unit/test_message_broker_comprehensive.py",
      "tests/unit/test_adw_session_persistence.py",
      "tests/unit/test_shared_knowledge_base.py",
      "tests/unit/test_adw_session_manager.py",
      "tests/unit/test_tmux_manager.py",
      "tests/unit/test_autonomous_dashboard.py",
      "tests/unit/test_context_engine.py",
      "tests/unit/test_orchestrator.py",
      "tests/unit/test_realtime_collaboration.py",
      "tests/unit/test_enhanced_message_broker.py",
      "tests/unit/test_base_agent.py",
      "tests/unit/test_self_modifier.py",
      "tests/unit/test_enhanced_pair_programming.py",
      "tests/unit/test_extended_session_tester.py",
      "tests/unit/test_config.py",
      "tests/unit/test_models.py",
      "tests/unit/test_cognitive_load_manager.py",
      "tests/unit/test_caching.py",
      "tests/unit/test_ai_test_generator.py",
      "tests/unit/test_task_queue_comprehensive.py",
      "tests/unit/test_pair_programming.py",
      "tests/unit/test_task_queue.py",
      "tests/unit/test_emergency_intervention.py",
      "tests/unit/test_self_modifier_enhanced.py",
      "tests/unit/test_autonomous_refactoring.py",
      "tests/unit/test_async_db.py",
      "tests/security/test_api_security.py",
      "tests/security/test_security_pytest.py",
      "tests/unit/safety/test_rollback_system.py"
    ],
    "integration_tests": [
      "tests/integration/test_adw_full_system.py",
      "tests/integration/test_agent_enhanced_communication.py",
      "tests/integration/test_agent_coordination.py",
      "tests/integration/test_enhanced_communication_integration.py",
      "tests/integration/test_complete_agent_workflow.py",
      "tests/integration/test_core_system_integration.py",
      "tests/integration/test_component_integration.py",
      "tests/integration/test_real_system_integration.py",
      "tests/integration/test_api.py",
      "tests/integration/test_phase3_workflows.py"
    ],
    "e2e_tests": [
      "tests/e2e/test_system.py",
      "tests/e2e/test_core_user_workflows.py"
    ],
    "coverage_gaps": []
  },
  "critical_paths": {
    "agent_lifecycle": [
      "Agent Creation",
      "Agent Registration",
      "Task Assignment",
      "Task Execution",
      "Result Reporting",
      "Agent Cleanup"
    ],
    "collaboration_flow": [
      "Session Creation",
      "Agent Joining",
      "Context Sharing",
      "Message Exchange",
      "Conflict Resolution",
      "Session Completion"
    ],
    "api_request_flow": [
      "Authentication",
      "Request Validation",
      "Business Logic",
      "Database Operation",
      "Response Formation"
    ]
  },
  "recommendations": [
    "1. Implement comprehensive unit tests for each component",
    "2. Add contract testing between components",
    "3. Create component isolation test framework",
    "4. Implement proper integration test suite",
    "5. Add performance benchmarking tests",
    "6. Create CLI command completeness audit",
    "7. Implement health check endpoints for all services",
    "8. Add monitoring and observability",
    "9. Create deployment verification tests",
    "10. Implement automated dependency vulnerability scanning"
  ]
}