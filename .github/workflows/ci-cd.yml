name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quality Assurance
  qa:
    name: Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Lint with ruff
        run: |
          uv run ruff check . --output-format=github

      - name: Format check with ruff
        run: |
          uv run ruff format --check .

      - name: Type check with mypy
        run: |
          uv run mypy src/ --ignore-missing-imports
        continue-on-error: true

      - name: Security check with bandit
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: qa
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: leanvibe_hive_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/leanvibe_hive_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: testing
        run: |
          uv run pytest --cov=src --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
  # Integration Tests - Temporarily disabled to fix CI hanging
  # TODO: Re-enable after fixing docker services and API server setup
  # integration-test:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest
  #   needs: test
  #     
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  # 
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  # 
  #     - name: Build test environment
  #       run: |
  #         docker-compose -f docker-compose.yaml up -d postgres redis
  #         sleep 30
  # 
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'
  # 
  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v2
  #       with:
  #         version: "latest"
  # 
  #     - name: Install dependencies
  #       run: |
  #         uv sync --extra dev
  # 
  #     - name: Run integration tests
  #       env:
  #         DATABASE_URL: postgresql://hive_user:hive_pass@localhost:5433/leanvibe_hive
  #         REDIS_URL: redis://localhost:6381
  #         ENVIRONMENT: testing
  #       run: |
  #         uv run pytest tests/integration/ -v
  # 
  #     - name: Run e2e tests
  #       env:
  #         DATABASE_URL: postgresql://hive_user:hive_pass@localhost:5433/leanvibe_hive
  #         REDIS_URL: redis://localhost:6381
  #         ENVIRONMENT: testing
  #       run: |
  #         uv run pytest tests/e2e/ -v
  # 
  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         docker-compose -f docker-compose.yaml down -v

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: qa
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test]  # Removed integration-test dependency until it's fixed
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-api
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Build and push Agent image
        id: build-agent
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.agent
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-agent
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example, using SSH to deploy to staging server:
          # ssh ${{ secrets.STAGING_HOST }} "cd /app && ./scripts/deployment/deploy-production.sh"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # For example, using SSH to deploy to production server:
          # ssh ${{ secrets.PRODUCTION_HOST }} "cd /app && ./scripts/deployment/deploy-production.sh"

  # Notify on Deployment
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')

    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow